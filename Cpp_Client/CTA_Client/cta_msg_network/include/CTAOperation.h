/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CTAOperation_H
#define CTAOperation_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "CTAAtsMsg_types.h"
#include "AtsOperation.h"

namespace CTAMsg {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CTAOperationIf : virtual public  ::AtsGeneral::AtsOperationIf {
 public:
  virtual ~CTAOperationIf() {}
  virtual bool SetFutureSpreadHitStatus(const std::string& atsName, const bool status) = 0;
  virtual bool SetFutureSpreadConStatus(const std::string& atsName, const bool status) = 0;
  virtual bool SetFutureSpreadConBuy(const std::string& atsName, const bool status) = 0;
  virtual bool SetFutureSpreadConSell(const std::string& atsName, const bool status) = 0;
  virtual double SetFutureSpreadFairSpread(const std::string& atsName, const double fairspread) = 0;
  virtual double SetFutureSpreadPosShift(const std::string& atsName, const double posShift) = 0;
  virtual double SetFutureSpreadMinGainCon(const std::string& atsName, const double minGainCon) = 0;
  virtual double SetFutureSpreadMinGainHit(const std::string& atsName, const double minGainHit) = 0;
  virtual int32_t SetFutureSpreadMinInterval(const std::string& atsName, const int32_t MinInterval) = 0;
  virtual int32_t SetFutureSpreadMaxWaitInterval(const std::string& atsName, const int32_t MaxWaitInterval) = 0;
  virtual int32_t SetFutureSpreadHitSize(const std::string& atsName, const int32_t HitSize) = 0;
  virtual int32_t SetFutureSpreadConSize(const std::string& atsName, const int32_t ConSize) = 0;
  virtual double SetFutureSpreadConMinDiff(const std::string& atsName, const double ConMinDiff) = 0;
  virtual double SetFutureSpreadMinGainConExit(const std::string& atsName, const double MinGainConExit) = 0;
  virtual double SetFutureSpreadConMaxDistance(const std::string& atsName, const double ConMaxDistance) = 0;
  virtual int32_t SetFutureSpreadFuture1Pos(const std::string& atsName, const int32_t Future1Pos) = 0;
  virtual int32_t SetFutureSpreadFuture2Pos(const std::string& atsName, const int32_t Future2Pos) = 0;
  virtual int32_t SetFutureSpreadMaxNumOrders(const std::string& atsName, const int32_t MaxNumOrders) = 0;
  virtual int32_t SetFutureSpreadMaxPos(const std::string& atsName, const int32_t MaxPos) = 0;
  virtual bool SetFutureSpreadUseMarketOrder(const std::string& atsName, const bool useMarketORder) = 0;
  virtual double SetFutureSpreadPosConvex(const std::string& atsName, const double posConvex) = 0;
  virtual bool SetFutureSpreadIgnoreUpDnLimit(const std::string& atsName, const bool IgnoreUpDnLimit) = 0;
  virtual double SetFutureSpreadConvergeRate(const std::string& atsName, const double ConvergeRate) = 0;
  virtual double SetFutureSpreadFastConvergeRate(const std::string& atsName, const double FastConvergeRate) = 0;
  virtual double SetFutureSpreadRatio(const std::string& atsName, const double Ratio) = 0;
  virtual void SetAtsFutureSpreadFut1(std::string& _return, const std::string& atsName, const std::string& code) = 0;
  virtual void SetAtsFutureSpreadFut2(std::string& _return, const std::string& atsName, const std::string& code) = 0;
  virtual void SetAtsFutureSpreadLastKLineTime(std::string& _return, const std::string& atsName, const std::string& KLineTime) = 0;
  virtual void SetAtsFutureSpreadKInterval(std::string& _return, const std::string& atsName, const std::string& KInterval) = 0;
  virtual void CreateAutomaton(CTAAtsMsg& _return, const std::string& automatonName, const std::string& underlyingName, const std::string& subscrib_list, const std::string& feedsourcesStr, const std::string& connectionsStr) = 0;
  virtual void SpreadBidHitTrade(const std::string& atsName) = 0;
  virtual void SpreadAskHitTrade(const std::string& atsName) = 0;
  virtual void SpreadBidConTrade(const std::string& atsName) = 0;
  virtual void SpreadAskConTrade(const std::string& atsName) = 0;
  virtual bool SetKeepOrders(const std::string& atsName, const bool keepOrders) = 0;
  virtual bool SetForceOpen(const std::string& atsName, const bool forceOpen) = 0;
  virtual double SetFutureSpeedConvergeRate(const std::string& atsName, const double SpeedConvergeRate) = 0;
  virtual double SetFutureSpeed(const std::string& atsName, const double Speed) = 0;
  virtual double SetFutureLastSpread(const std::string& atsName, const double LastSpread) = 0;
  virtual double SetVolatility(const std::string& atsName, const double Vol) = 0;
  virtual double SetMaxVolRange(const std::string& atsName, const double MaxVolRange) = 0;
  virtual bool SetMarketMakerActive(const std::string& atsName, const std::string& code, const bool active) = 0;
  virtual double SetMarketMakerDouble(const std::string& atsName, const std::string& code, const std::string& param, const double value) = 0;
  virtual int32_t SetMarketMakerInt(const std::string& atsName, const std::string& code, const std::string& param, const int32_t value) = 0;
  virtual bool SetDoFutureMarketMaker(const std::string& atsName, const bool value) = 0;
  virtual bool SetMarketMakerCanReduce(const std::string& atsName, const bool value) = 0;
  virtual void ForceContribe(const std::string& atsName) = 0;
  virtual void ResetMovingAvg(const std::string& atsName) = 0;
  virtual bool SetTwapData(const std::string& atsName, const TWAPDataMsg& data) = 0;
  virtual bool SetTurtleAlgoData(const std::string& atsName, const TurtleAlgoMsg& data) = 0;
  virtual bool SetKlineConfig(const std::string& atsName, const KlineConfigMsg& data) = 0;
  virtual void SetTurtleFuture(std::string& _return, const std::string& atsName, const std::string& code) = 0;
  virtual double SetRiskDegree(const std::string& atsName, const double RiskDegree) = 0;
  virtual void MatchOrders() = 0;
};

class CTAOperationIfFactory : virtual public  ::AtsGeneral::AtsOperationIfFactory {
 public:
  typedef CTAOperationIf Handler;

  virtual ~CTAOperationIfFactory() {}

  virtual CTAOperationIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::AtsGeneral::AtsOperationIf* /* handler */) = 0;
};

class CTAOperationIfSingletonFactory : virtual public CTAOperationIfFactory {
 public:
  CTAOperationIfSingletonFactory(const boost::shared_ptr<CTAOperationIf>& iface) : iface_(iface) {}
  virtual ~CTAOperationIfSingletonFactory() {}

  virtual CTAOperationIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::AtsGeneral::AtsOperationIf* /* handler */) {}

 protected:
  boost::shared_ptr<CTAOperationIf> iface_;
};

class CTAOperationNull : virtual public CTAOperationIf , virtual public  ::AtsGeneral::AtsOperationNull {
 public:
  virtual ~CTAOperationNull() {}
  bool SetFutureSpreadHitStatus(const std::string& /* atsName */, const bool /* status */) {
    bool _return = false;
    return _return;
  }
  bool SetFutureSpreadConStatus(const std::string& /* atsName */, const bool /* status */) {
    bool _return = false;
    return _return;
  }
  bool SetFutureSpreadConBuy(const std::string& /* atsName */, const bool /* status */) {
    bool _return = false;
    return _return;
  }
  bool SetFutureSpreadConSell(const std::string& /* atsName */, const bool /* status */) {
    bool _return = false;
    return _return;
  }
  double SetFutureSpreadFairSpread(const std::string& /* atsName */, const double /* fairspread */) {
    double _return = (double)0;
    return _return;
  }
  double SetFutureSpreadPosShift(const std::string& /* atsName */, const double /* posShift */) {
    double _return = (double)0;
    return _return;
  }
  double SetFutureSpreadMinGainCon(const std::string& /* atsName */, const double /* minGainCon */) {
    double _return = (double)0;
    return _return;
  }
  double SetFutureSpreadMinGainHit(const std::string& /* atsName */, const double /* minGainHit */) {
    double _return = (double)0;
    return _return;
  }
  int32_t SetFutureSpreadMinInterval(const std::string& /* atsName */, const int32_t /* MinInterval */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t SetFutureSpreadMaxWaitInterval(const std::string& /* atsName */, const int32_t /* MaxWaitInterval */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t SetFutureSpreadHitSize(const std::string& /* atsName */, const int32_t /* HitSize */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t SetFutureSpreadConSize(const std::string& /* atsName */, const int32_t /* ConSize */) {
    int32_t _return = 0;
    return _return;
  }
  double SetFutureSpreadConMinDiff(const std::string& /* atsName */, const double /* ConMinDiff */) {
    double _return = (double)0;
    return _return;
  }
  double SetFutureSpreadMinGainConExit(const std::string& /* atsName */, const double /* MinGainConExit */) {
    double _return = (double)0;
    return _return;
  }
  double SetFutureSpreadConMaxDistance(const std::string& /* atsName */, const double /* ConMaxDistance */) {
    double _return = (double)0;
    return _return;
  }
  int32_t SetFutureSpreadFuture1Pos(const std::string& /* atsName */, const int32_t /* Future1Pos */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t SetFutureSpreadFuture2Pos(const std::string& /* atsName */, const int32_t /* Future2Pos */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t SetFutureSpreadMaxNumOrders(const std::string& /* atsName */, const int32_t /* MaxNumOrders */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t SetFutureSpreadMaxPos(const std::string& /* atsName */, const int32_t /* MaxPos */) {
    int32_t _return = 0;
    return _return;
  }
  bool SetFutureSpreadUseMarketOrder(const std::string& /* atsName */, const bool /* useMarketORder */) {
    bool _return = false;
    return _return;
  }
  double SetFutureSpreadPosConvex(const std::string& /* atsName */, const double /* posConvex */) {
    double _return = (double)0;
    return _return;
  }
  bool SetFutureSpreadIgnoreUpDnLimit(const std::string& /* atsName */, const bool /* IgnoreUpDnLimit */) {
    bool _return = false;
    return _return;
  }
  double SetFutureSpreadConvergeRate(const std::string& /* atsName */, const double /* ConvergeRate */) {
    double _return = (double)0;
    return _return;
  }
  double SetFutureSpreadFastConvergeRate(const std::string& /* atsName */, const double /* FastConvergeRate */) {
    double _return = (double)0;
    return _return;
  }
  double SetFutureSpreadRatio(const std::string& /* atsName */, const double /* Ratio */) {
    double _return = (double)0;
    return _return;
  }
  void SetAtsFutureSpreadFut1(std::string& /* _return */, const std::string& /* atsName */, const std::string& /* code */) {
    return;
  }
  void SetAtsFutureSpreadFut2(std::string& /* _return */, const std::string& /* atsName */, const std::string& /* code */) {
    return;
  }
  void SetAtsFutureSpreadLastKLineTime(std::string& /* _return */, const std::string& /* atsName */, const std::string& /* KLineTime */) {
    return;
  }
  void SetAtsFutureSpreadKInterval(std::string& /* _return */, const std::string& /* atsName */, const std::string& /* KInterval */) {
    return;
  }
  void CreateAutomaton(CTAAtsMsg& /* _return */, const std::string& /* automatonName */, const std::string& /* underlyingName */, const std::string& /* subscrib_list */, const std::string& /* feedsourcesStr */, const std::string& /* connectionsStr */) {
    return;
  }
  void SpreadBidHitTrade(const std::string& /* atsName */) {
    return;
  }
  void SpreadAskHitTrade(const std::string& /* atsName */) {
    return;
  }
  void SpreadBidConTrade(const std::string& /* atsName */) {
    return;
  }
  void SpreadAskConTrade(const std::string& /* atsName */) {
    return;
  }
  bool SetKeepOrders(const std::string& /* atsName */, const bool /* keepOrders */) {
    bool _return = false;
    return _return;
  }
  bool SetForceOpen(const std::string& /* atsName */, const bool /* forceOpen */) {
    bool _return = false;
    return _return;
  }
  double SetFutureSpeedConvergeRate(const std::string& /* atsName */, const double /* SpeedConvergeRate */) {
    double _return = (double)0;
    return _return;
  }
  double SetFutureSpeed(const std::string& /* atsName */, const double /* Speed */) {
    double _return = (double)0;
    return _return;
  }
  double SetFutureLastSpread(const std::string& /* atsName */, const double /* LastSpread */) {
    double _return = (double)0;
    return _return;
  }
  double SetVolatility(const std::string& /* atsName */, const double /* Vol */) {
    double _return = (double)0;
    return _return;
  }
  double SetMaxVolRange(const std::string& /* atsName */, const double /* MaxVolRange */) {
    double _return = (double)0;
    return _return;
  }
  bool SetMarketMakerActive(const std::string& /* atsName */, const std::string& /* code */, const bool /* active */) {
    bool _return = false;
    return _return;
  }
  double SetMarketMakerDouble(const std::string& /* atsName */, const std::string& /* code */, const std::string& /* param */, const double /* value */) {
    double _return = (double)0;
    return _return;
  }
  int32_t SetMarketMakerInt(const std::string& /* atsName */, const std::string& /* code */, const std::string& /* param */, const int32_t /* value */) {
    int32_t _return = 0;
    return _return;
  }
  bool SetDoFutureMarketMaker(const std::string& /* atsName */, const bool /* value */) {
    bool _return = false;
    return _return;
  }
  bool SetMarketMakerCanReduce(const std::string& /* atsName */, const bool /* value */) {
    bool _return = false;
    return _return;
  }
  void ForceContribe(const std::string& /* atsName */) {
    return;
  }
  void ResetMovingAvg(const std::string& /* atsName */) {
    return;
  }
  bool SetTwapData(const std::string& /* atsName */, const TWAPDataMsg& /* data */) {
    bool _return = false;
    return _return;
  }
  bool SetTurtleAlgoData(const std::string& /* atsName */, const TurtleAlgoMsg& /* data */) {
    bool _return = false;
    return _return;
  }
  bool SetKlineConfig(const std::string& /* atsName */, const KlineConfigMsg& /* data */) {
    bool _return = false;
    return _return;
  }
  void SetTurtleFuture(std::string& /* _return */, const std::string& /* atsName */, const std::string& /* code */) {
    return;
  }
  double SetRiskDegree(const std::string& /* atsName */, const double /* RiskDegree */) {
    double _return = (double)0;
    return _return;
  }
  void MatchOrders() {
    return;
  }
};

typedef struct _CTAOperation_SetFutureSpreadHitStatus_args__isset {
  _CTAOperation_SetFutureSpreadHitStatus_args__isset() : atsName(false), status(false) {}
  bool atsName :1;
  bool status :1;
} _CTAOperation_SetFutureSpreadHitStatus_args__isset;

class CTAOperation_SetFutureSpreadHitStatus_args {
 public:

  CTAOperation_SetFutureSpreadHitStatus_args(const CTAOperation_SetFutureSpreadHitStatus_args&);
  CTAOperation_SetFutureSpreadHitStatus_args& operator=(const CTAOperation_SetFutureSpreadHitStatus_args&);
  CTAOperation_SetFutureSpreadHitStatus_args() : atsName(), status(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadHitStatus_args() throw();
  std::string atsName;
  bool status;

  _CTAOperation_SetFutureSpreadHitStatus_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_status(const bool val);

  bool operator == (const CTAOperation_SetFutureSpreadHitStatus_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadHitStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadHitStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadHitStatus_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadHitStatus_pargs() throw();
  const std::string* atsName;
  const bool* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadHitStatus_result__isset {
  _CTAOperation_SetFutureSpreadHitStatus_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadHitStatus_result__isset;

class CTAOperation_SetFutureSpreadHitStatus_result {
 public:

  CTAOperation_SetFutureSpreadHitStatus_result(const CTAOperation_SetFutureSpreadHitStatus_result&);
  CTAOperation_SetFutureSpreadHitStatus_result& operator=(const CTAOperation_SetFutureSpreadHitStatus_result&);
  CTAOperation_SetFutureSpreadHitStatus_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadHitStatus_result() throw();
  bool success;

  _CTAOperation_SetFutureSpreadHitStatus_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetFutureSpreadHitStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadHitStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadHitStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadHitStatus_presult__isset {
  _CTAOperation_SetFutureSpreadHitStatus_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadHitStatus_presult__isset;

class CTAOperation_SetFutureSpreadHitStatus_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadHitStatus_presult() throw();
  bool* success;

  _CTAOperation_SetFutureSpreadHitStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadConStatus_args__isset {
  _CTAOperation_SetFutureSpreadConStatus_args__isset() : atsName(false), status(false) {}
  bool atsName :1;
  bool status :1;
} _CTAOperation_SetFutureSpreadConStatus_args__isset;

class CTAOperation_SetFutureSpreadConStatus_args {
 public:

  CTAOperation_SetFutureSpreadConStatus_args(const CTAOperation_SetFutureSpreadConStatus_args&);
  CTAOperation_SetFutureSpreadConStatus_args& operator=(const CTAOperation_SetFutureSpreadConStatus_args&);
  CTAOperation_SetFutureSpreadConStatus_args() : atsName(), status(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConStatus_args() throw();
  std::string atsName;
  bool status;

  _CTAOperation_SetFutureSpreadConStatus_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_status(const bool val);

  bool operator == (const CTAOperation_SetFutureSpreadConStatus_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadConStatus_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadConStatus_pargs() throw();
  const std::string* atsName;
  const bool* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConStatus_result__isset {
  _CTAOperation_SetFutureSpreadConStatus_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConStatus_result__isset;

class CTAOperation_SetFutureSpreadConStatus_result {
 public:

  CTAOperation_SetFutureSpreadConStatus_result(const CTAOperation_SetFutureSpreadConStatus_result&);
  CTAOperation_SetFutureSpreadConStatus_result& operator=(const CTAOperation_SetFutureSpreadConStatus_result&);
  CTAOperation_SetFutureSpreadConStatus_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConStatus_result() throw();
  bool success;

  _CTAOperation_SetFutureSpreadConStatus_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetFutureSpreadConStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConStatus_presult__isset {
  _CTAOperation_SetFutureSpreadConStatus_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConStatus_presult__isset;

class CTAOperation_SetFutureSpreadConStatus_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadConStatus_presult() throw();
  bool* success;

  _CTAOperation_SetFutureSpreadConStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadConBuy_args__isset {
  _CTAOperation_SetFutureSpreadConBuy_args__isset() : atsName(false), status(false) {}
  bool atsName :1;
  bool status :1;
} _CTAOperation_SetFutureSpreadConBuy_args__isset;

class CTAOperation_SetFutureSpreadConBuy_args {
 public:

  CTAOperation_SetFutureSpreadConBuy_args(const CTAOperation_SetFutureSpreadConBuy_args&);
  CTAOperation_SetFutureSpreadConBuy_args& operator=(const CTAOperation_SetFutureSpreadConBuy_args&);
  CTAOperation_SetFutureSpreadConBuy_args() : atsName(), status(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConBuy_args() throw();
  std::string atsName;
  bool status;

  _CTAOperation_SetFutureSpreadConBuy_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_status(const bool val);

  bool operator == (const CTAOperation_SetFutureSpreadConBuy_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConBuy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConBuy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadConBuy_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadConBuy_pargs() throw();
  const std::string* atsName;
  const bool* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConBuy_result__isset {
  _CTAOperation_SetFutureSpreadConBuy_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConBuy_result__isset;

class CTAOperation_SetFutureSpreadConBuy_result {
 public:

  CTAOperation_SetFutureSpreadConBuy_result(const CTAOperation_SetFutureSpreadConBuy_result&);
  CTAOperation_SetFutureSpreadConBuy_result& operator=(const CTAOperation_SetFutureSpreadConBuy_result&);
  CTAOperation_SetFutureSpreadConBuy_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConBuy_result() throw();
  bool success;

  _CTAOperation_SetFutureSpreadConBuy_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetFutureSpreadConBuy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConBuy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConBuy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConBuy_presult__isset {
  _CTAOperation_SetFutureSpreadConBuy_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConBuy_presult__isset;

class CTAOperation_SetFutureSpreadConBuy_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadConBuy_presult() throw();
  bool* success;

  _CTAOperation_SetFutureSpreadConBuy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadConSell_args__isset {
  _CTAOperation_SetFutureSpreadConSell_args__isset() : atsName(false), status(false) {}
  bool atsName :1;
  bool status :1;
} _CTAOperation_SetFutureSpreadConSell_args__isset;

class CTAOperation_SetFutureSpreadConSell_args {
 public:

  CTAOperation_SetFutureSpreadConSell_args(const CTAOperation_SetFutureSpreadConSell_args&);
  CTAOperation_SetFutureSpreadConSell_args& operator=(const CTAOperation_SetFutureSpreadConSell_args&);
  CTAOperation_SetFutureSpreadConSell_args() : atsName(), status(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConSell_args() throw();
  std::string atsName;
  bool status;

  _CTAOperation_SetFutureSpreadConSell_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_status(const bool val);

  bool operator == (const CTAOperation_SetFutureSpreadConSell_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConSell_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConSell_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadConSell_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadConSell_pargs() throw();
  const std::string* atsName;
  const bool* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConSell_result__isset {
  _CTAOperation_SetFutureSpreadConSell_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConSell_result__isset;

class CTAOperation_SetFutureSpreadConSell_result {
 public:

  CTAOperation_SetFutureSpreadConSell_result(const CTAOperation_SetFutureSpreadConSell_result&);
  CTAOperation_SetFutureSpreadConSell_result& operator=(const CTAOperation_SetFutureSpreadConSell_result&);
  CTAOperation_SetFutureSpreadConSell_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConSell_result() throw();
  bool success;

  _CTAOperation_SetFutureSpreadConSell_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetFutureSpreadConSell_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConSell_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConSell_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConSell_presult__isset {
  _CTAOperation_SetFutureSpreadConSell_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConSell_presult__isset;

class CTAOperation_SetFutureSpreadConSell_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadConSell_presult() throw();
  bool* success;

  _CTAOperation_SetFutureSpreadConSell_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadFairSpread_args__isset {
  _CTAOperation_SetFutureSpreadFairSpread_args__isset() : atsName(false), fairspread(false) {}
  bool atsName :1;
  bool fairspread :1;
} _CTAOperation_SetFutureSpreadFairSpread_args__isset;

class CTAOperation_SetFutureSpreadFairSpread_args {
 public:

  CTAOperation_SetFutureSpreadFairSpread_args(const CTAOperation_SetFutureSpreadFairSpread_args&);
  CTAOperation_SetFutureSpreadFairSpread_args& operator=(const CTAOperation_SetFutureSpreadFairSpread_args&);
  CTAOperation_SetFutureSpreadFairSpread_args() : atsName(), fairspread(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadFairSpread_args() throw();
  std::string atsName;
  double fairspread;

  _CTAOperation_SetFutureSpreadFairSpread_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_fairspread(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadFairSpread_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(fairspread == rhs.fairspread))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadFairSpread_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadFairSpread_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadFairSpread_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadFairSpread_pargs() throw();
  const std::string* atsName;
  const double* fairspread;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadFairSpread_result__isset {
  _CTAOperation_SetFutureSpreadFairSpread_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadFairSpread_result__isset;

class CTAOperation_SetFutureSpreadFairSpread_result {
 public:

  CTAOperation_SetFutureSpreadFairSpread_result(const CTAOperation_SetFutureSpreadFairSpread_result&);
  CTAOperation_SetFutureSpreadFairSpread_result& operator=(const CTAOperation_SetFutureSpreadFairSpread_result&);
  CTAOperation_SetFutureSpreadFairSpread_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadFairSpread_result() throw();
  double success;

  _CTAOperation_SetFutureSpreadFairSpread_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadFairSpread_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadFairSpread_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadFairSpread_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadFairSpread_presult__isset {
  _CTAOperation_SetFutureSpreadFairSpread_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadFairSpread_presult__isset;

class CTAOperation_SetFutureSpreadFairSpread_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadFairSpread_presult() throw();
  double* success;

  _CTAOperation_SetFutureSpreadFairSpread_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadPosShift_args__isset {
  _CTAOperation_SetFutureSpreadPosShift_args__isset() : atsName(false), posShift(false) {}
  bool atsName :1;
  bool posShift :1;
} _CTAOperation_SetFutureSpreadPosShift_args__isset;

class CTAOperation_SetFutureSpreadPosShift_args {
 public:

  CTAOperation_SetFutureSpreadPosShift_args(const CTAOperation_SetFutureSpreadPosShift_args&);
  CTAOperation_SetFutureSpreadPosShift_args& operator=(const CTAOperation_SetFutureSpreadPosShift_args&);
  CTAOperation_SetFutureSpreadPosShift_args() : atsName(), posShift(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadPosShift_args() throw();
  std::string atsName;
  double posShift;

  _CTAOperation_SetFutureSpreadPosShift_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_posShift(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadPosShift_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(posShift == rhs.posShift))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadPosShift_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadPosShift_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadPosShift_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadPosShift_pargs() throw();
  const std::string* atsName;
  const double* posShift;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadPosShift_result__isset {
  _CTAOperation_SetFutureSpreadPosShift_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadPosShift_result__isset;

class CTAOperation_SetFutureSpreadPosShift_result {
 public:

  CTAOperation_SetFutureSpreadPosShift_result(const CTAOperation_SetFutureSpreadPosShift_result&);
  CTAOperation_SetFutureSpreadPosShift_result& operator=(const CTAOperation_SetFutureSpreadPosShift_result&);
  CTAOperation_SetFutureSpreadPosShift_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadPosShift_result() throw();
  double success;

  _CTAOperation_SetFutureSpreadPosShift_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadPosShift_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadPosShift_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadPosShift_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadPosShift_presult__isset {
  _CTAOperation_SetFutureSpreadPosShift_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadPosShift_presult__isset;

class CTAOperation_SetFutureSpreadPosShift_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadPosShift_presult() throw();
  double* success;

  _CTAOperation_SetFutureSpreadPosShift_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadMinGainCon_args__isset {
  _CTAOperation_SetFutureSpreadMinGainCon_args__isset() : atsName(false), minGainCon(false) {}
  bool atsName :1;
  bool minGainCon :1;
} _CTAOperation_SetFutureSpreadMinGainCon_args__isset;

class CTAOperation_SetFutureSpreadMinGainCon_args {
 public:

  CTAOperation_SetFutureSpreadMinGainCon_args(const CTAOperation_SetFutureSpreadMinGainCon_args&);
  CTAOperation_SetFutureSpreadMinGainCon_args& operator=(const CTAOperation_SetFutureSpreadMinGainCon_args&);
  CTAOperation_SetFutureSpreadMinGainCon_args() : atsName(), minGainCon(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMinGainCon_args() throw();
  std::string atsName;
  double minGainCon;

  _CTAOperation_SetFutureSpreadMinGainCon_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_minGainCon(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadMinGainCon_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(minGainCon == rhs.minGainCon))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMinGainCon_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMinGainCon_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadMinGainCon_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadMinGainCon_pargs() throw();
  const std::string* atsName;
  const double* minGainCon;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMinGainCon_result__isset {
  _CTAOperation_SetFutureSpreadMinGainCon_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMinGainCon_result__isset;

class CTAOperation_SetFutureSpreadMinGainCon_result {
 public:

  CTAOperation_SetFutureSpreadMinGainCon_result(const CTAOperation_SetFutureSpreadMinGainCon_result&);
  CTAOperation_SetFutureSpreadMinGainCon_result& operator=(const CTAOperation_SetFutureSpreadMinGainCon_result&);
  CTAOperation_SetFutureSpreadMinGainCon_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMinGainCon_result() throw();
  double success;

  _CTAOperation_SetFutureSpreadMinGainCon_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadMinGainCon_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMinGainCon_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMinGainCon_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMinGainCon_presult__isset {
  _CTAOperation_SetFutureSpreadMinGainCon_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMinGainCon_presult__isset;

class CTAOperation_SetFutureSpreadMinGainCon_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadMinGainCon_presult() throw();
  double* success;

  _CTAOperation_SetFutureSpreadMinGainCon_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadMinGainHit_args__isset {
  _CTAOperation_SetFutureSpreadMinGainHit_args__isset() : atsName(false), minGainHit(false) {}
  bool atsName :1;
  bool minGainHit :1;
} _CTAOperation_SetFutureSpreadMinGainHit_args__isset;

class CTAOperation_SetFutureSpreadMinGainHit_args {
 public:

  CTAOperation_SetFutureSpreadMinGainHit_args(const CTAOperation_SetFutureSpreadMinGainHit_args&);
  CTAOperation_SetFutureSpreadMinGainHit_args& operator=(const CTAOperation_SetFutureSpreadMinGainHit_args&);
  CTAOperation_SetFutureSpreadMinGainHit_args() : atsName(), minGainHit(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMinGainHit_args() throw();
  std::string atsName;
  double minGainHit;

  _CTAOperation_SetFutureSpreadMinGainHit_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_minGainHit(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadMinGainHit_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(minGainHit == rhs.minGainHit))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMinGainHit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMinGainHit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadMinGainHit_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadMinGainHit_pargs() throw();
  const std::string* atsName;
  const double* minGainHit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMinGainHit_result__isset {
  _CTAOperation_SetFutureSpreadMinGainHit_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMinGainHit_result__isset;

class CTAOperation_SetFutureSpreadMinGainHit_result {
 public:

  CTAOperation_SetFutureSpreadMinGainHit_result(const CTAOperation_SetFutureSpreadMinGainHit_result&);
  CTAOperation_SetFutureSpreadMinGainHit_result& operator=(const CTAOperation_SetFutureSpreadMinGainHit_result&);
  CTAOperation_SetFutureSpreadMinGainHit_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMinGainHit_result() throw();
  double success;

  _CTAOperation_SetFutureSpreadMinGainHit_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadMinGainHit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMinGainHit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMinGainHit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMinGainHit_presult__isset {
  _CTAOperation_SetFutureSpreadMinGainHit_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMinGainHit_presult__isset;

class CTAOperation_SetFutureSpreadMinGainHit_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadMinGainHit_presult() throw();
  double* success;

  _CTAOperation_SetFutureSpreadMinGainHit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadMinInterval_args__isset {
  _CTAOperation_SetFutureSpreadMinInterval_args__isset() : atsName(false), MinInterval(false) {}
  bool atsName :1;
  bool MinInterval :1;
} _CTAOperation_SetFutureSpreadMinInterval_args__isset;

class CTAOperation_SetFutureSpreadMinInterval_args {
 public:

  CTAOperation_SetFutureSpreadMinInterval_args(const CTAOperation_SetFutureSpreadMinInterval_args&);
  CTAOperation_SetFutureSpreadMinInterval_args& operator=(const CTAOperation_SetFutureSpreadMinInterval_args&);
  CTAOperation_SetFutureSpreadMinInterval_args() : atsName(), MinInterval(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMinInterval_args() throw();
  std::string atsName;
  int32_t MinInterval;

  _CTAOperation_SetFutureSpreadMinInterval_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_MinInterval(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadMinInterval_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(MinInterval == rhs.MinInterval))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMinInterval_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMinInterval_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadMinInterval_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadMinInterval_pargs() throw();
  const std::string* atsName;
  const int32_t* MinInterval;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMinInterval_result__isset {
  _CTAOperation_SetFutureSpreadMinInterval_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMinInterval_result__isset;

class CTAOperation_SetFutureSpreadMinInterval_result {
 public:

  CTAOperation_SetFutureSpreadMinInterval_result(const CTAOperation_SetFutureSpreadMinInterval_result&);
  CTAOperation_SetFutureSpreadMinInterval_result& operator=(const CTAOperation_SetFutureSpreadMinInterval_result&);
  CTAOperation_SetFutureSpreadMinInterval_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMinInterval_result() throw();
  int32_t success;

  _CTAOperation_SetFutureSpreadMinInterval_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadMinInterval_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMinInterval_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMinInterval_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMinInterval_presult__isset {
  _CTAOperation_SetFutureSpreadMinInterval_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMinInterval_presult__isset;

class CTAOperation_SetFutureSpreadMinInterval_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadMinInterval_presult() throw();
  int32_t* success;

  _CTAOperation_SetFutureSpreadMinInterval_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadMaxWaitInterval_args__isset {
  _CTAOperation_SetFutureSpreadMaxWaitInterval_args__isset() : atsName(false), MaxWaitInterval(false) {}
  bool atsName :1;
  bool MaxWaitInterval :1;
} _CTAOperation_SetFutureSpreadMaxWaitInterval_args__isset;

class CTAOperation_SetFutureSpreadMaxWaitInterval_args {
 public:

  CTAOperation_SetFutureSpreadMaxWaitInterval_args(const CTAOperation_SetFutureSpreadMaxWaitInterval_args&);
  CTAOperation_SetFutureSpreadMaxWaitInterval_args& operator=(const CTAOperation_SetFutureSpreadMaxWaitInterval_args&);
  CTAOperation_SetFutureSpreadMaxWaitInterval_args() : atsName(), MaxWaitInterval(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMaxWaitInterval_args() throw();
  std::string atsName;
  int32_t MaxWaitInterval;

  _CTAOperation_SetFutureSpreadMaxWaitInterval_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_MaxWaitInterval(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadMaxWaitInterval_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(MaxWaitInterval == rhs.MaxWaitInterval))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMaxWaitInterval_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMaxWaitInterval_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadMaxWaitInterval_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadMaxWaitInterval_pargs() throw();
  const std::string* atsName;
  const int32_t* MaxWaitInterval;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMaxWaitInterval_result__isset {
  _CTAOperation_SetFutureSpreadMaxWaitInterval_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMaxWaitInterval_result__isset;

class CTAOperation_SetFutureSpreadMaxWaitInterval_result {
 public:

  CTAOperation_SetFutureSpreadMaxWaitInterval_result(const CTAOperation_SetFutureSpreadMaxWaitInterval_result&);
  CTAOperation_SetFutureSpreadMaxWaitInterval_result& operator=(const CTAOperation_SetFutureSpreadMaxWaitInterval_result&);
  CTAOperation_SetFutureSpreadMaxWaitInterval_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMaxWaitInterval_result() throw();
  int32_t success;

  _CTAOperation_SetFutureSpreadMaxWaitInterval_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadMaxWaitInterval_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMaxWaitInterval_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMaxWaitInterval_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMaxWaitInterval_presult__isset {
  _CTAOperation_SetFutureSpreadMaxWaitInterval_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMaxWaitInterval_presult__isset;

class CTAOperation_SetFutureSpreadMaxWaitInterval_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadMaxWaitInterval_presult() throw();
  int32_t* success;

  _CTAOperation_SetFutureSpreadMaxWaitInterval_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadHitSize_args__isset {
  _CTAOperation_SetFutureSpreadHitSize_args__isset() : atsName(false), HitSize(false) {}
  bool atsName :1;
  bool HitSize :1;
} _CTAOperation_SetFutureSpreadHitSize_args__isset;

class CTAOperation_SetFutureSpreadHitSize_args {
 public:

  CTAOperation_SetFutureSpreadHitSize_args(const CTAOperation_SetFutureSpreadHitSize_args&);
  CTAOperation_SetFutureSpreadHitSize_args& operator=(const CTAOperation_SetFutureSpreadHitSize_args&);
  CTAOperation_SetFutureSpreadHitSize_args() : atsName(), HitSize(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadHitSize_args() throw();
  std::string atsName;
  int32_t HitSize;

  _CTAOperation_SetFutureSpreadHitSize_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_HitSize(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadHitSize_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(HitSize == rhs.HitSize))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadHitSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadHitSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadHitSize_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadHitSize_pargs() throw();
  const std::string* atsName;
  const int32_t* HitSize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadHitSize_result__isset {
  _CTAOperation_SetFutureSpreadHitSize_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadHitSize_result__isset;

class CTAOperation_SetFutureSpreadHitSize_result {
 public:

  CTAOperation_SetFutureSpreadHitSize_result(const CTAOperation_SetFutureSpreadHitSize_result&);
  CTAOperation_SetFutureSpreadHitSize_result& operator=(const CTAOperation_SetFutureSpreadHitSize_result&);
  CTAOperation_SetFutureSpreadHitSize_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadHitSize_result() throw();
  int32_t success;

  _CTAOperation_SetFutureSpreadHitSize_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadHitSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadHitSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadHitSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadHitSize_presult__isset {
  _CTAOperation_SetFutureSpreadHitSize_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadHitSize_presult__isset;

class CTAOperation_SetFutureSpreadHitSize_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadHitSize_presult() throw();
  int32_t* success;

  _CTAOperation_SetFutureSpreadHitSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadConSize_args__isset {
  _CTAOperation_SetFutureSpreadConSize_args__isset() : atsName(false), ConSize(false) {}
  bool atsName :1;
  bool ConSize :1;
} _CTAOperation_SetFutureSpreadConSize_args__isset;

class CTAOperation_SetFutureSpreadConSize_args {
 public:

  CTAOperation_SetFutureSpreadConSize_args(const CTAOperation_SetFutureSpreadConSize_args&);
  CTAOperation_SetFutureSpreadConSize_args& operator=(const CTAOperation_SetFutureSpreadConSize_args&);
  CTAOperation_SetFutureSpreadConSize_args() : atsName(), ConSize(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConSize_args() throw();
  std::string atsName;
  int32_t ConSize;

  _CTAOperation_SetFutureSpreadConSize_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_ConSize(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadConSize_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(ConSize == rhs.ConSize))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadConSize_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadConSize_pargs() throw();
  const std::string* atsName;
  const int32_t* ConSize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConSize_result__isset {
  _CTAOperation_SetFutureSpreadConSize_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConSize_result__isset;

class CTAOperation_SetFutureSpreadConSize_result {
 public:

  CTAOperation_SetFutureSpreadConSize_result(const CTAOperation_SetFutureSpreadConSize_result&);
  CTAOperation_SetFutureSpreadConSize_result& operator=(const CTAOperation_SetFutureSpreadConSize_result&);
  CTAOperation_SetFutureSpreadConSize_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConSize_result() throw();
  int32_t success;

  _CTAOperation_SetFutureSpreadConSize_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadConSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConSize_presult__isset {
  _CTAOperation_SetFutureSpreadConSize_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConSize_presult__isset;

class CTAOperation_SetFutureSpreadConSize_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadConSize_presult() throw();
  int32_t* success;

  _CTAOperation_SetFutureSpreadConSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadConMinDiff_args__isset {
  _CTAOperation_SetFutureSpreadConMinDiff_args__isset() : atsName(false), ConMinDiff(false) {}
  bool atsName :1;
  bool ConMinDiff :1;
} _CTAOperation_SetFutureSpreadConMinDiff_args__isset;

class CTAOperation_SetFutureSpreadConMinDiff_args {
 public:

  CTAOperation_SetFutureSpreadConMinDiff_args(const CTAOperation_SetFutureSpreadConMinDiff_args&);
  CTAOperation_SetFutureSpreadConMinDiff_args& operator=(const CTAOperation_SetFutureSpreadConMinDiff_args&);
  CTAOperation_SetFutureSpreadConMinDiff_args() : atsName(), ConMinDiff(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConMinDiff_args() throw();
  std::string atsName;
  double ConMinDiff;

  _CTAOperation_SetFutureSpreadConMinDiff_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_ConMinDiff(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadConMinDiff_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(ConMinDiff == rhs.ConMinDiff))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConMinDiff_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConMinDiff_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadConMinDiff_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadConMinDiff_pargs() throw();
  const std::string* atsName;
  const double* ConMinDiff;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConMinDiff_result__isset {
  _CTAOperation_SetFutureSpreadConMinDiff_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConMinDiff_result__isset;

class CTAOperation_SetFutureSpreadConMinDiff_result {
 public:

  CTAOperation_SetFutureSpreadConMinDiff_result(const CTAOperation_SetFutureSpreadConMinDiff_result&);
  CTAOperation_SetFutureSpreadConMinDiff_result& operator=(const CTAOperation_SetFutureSpreadConMinDiff_result&);
  CTAOperation_SetFutureSpreadConMinDiff_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConMinDiff_result() throw();
  double success;

  _CTAOperation_SetFutureSpreadConMinDiff_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadConMinDiff_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConMinDiff_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConMinDiff_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConMinDiff_presult__isset {
  _CTAOperation_SetFutureSpreadConMinDiff_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConMinDiff_presult__isset;

class CTAOperation_SetFutureSpreadConMinDiff_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadConMinDiff_presult() throw();
  double* success;

  _CTAOperation_SetFutureSpreadConMinDiff_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadMinGainConExit_args__isset {
  _CTAOperation_SetFutureSpreadMinGainConExit_args__isset() : atsName(false), MinGainConExit(false) {}
  bool atsName :1;
  bool MinGainConExit :1;
} _CTAOperation_SetFutureSpreadMinGainConExit_args__isset;

class CTAOperation_SetFutureSpreadMinGainConExit_args {
 public:

  CTAOperation_SetFutureSpreadMinGainConExit_args(const CTAOperation_SetFutureSpreadMinGainConExit_args&);
  CTAOperation_SetFutureSpreadMinGainConExit_args& operator=(const CTAOperation_SetFutureSpreadMinGainConExit_args&);
  CTAOperation_SetFutureSpreadMinGainConExit_args() : atsName(), MinGainConExit(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMinGainConExit_args() throw();
  std::string atsName;
  double MinGainConExit;

  _CTAOperation_SetFutureSpreadMinGainConExit_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_MinGainConExit(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadMinGainConExit_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(MinGainConExit == rhs.MinGainConExit))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMinGainConExit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMinGainConExit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadMinGainConExit_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadMinGainConExit_pargs() throw();
  const std::string* atsName;
  const double* MinGainConExit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMinGainConExit_result__isset {
  _CTAOperation_SetFutureSpreadMinGainConExit_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMinGainConExit_result__isset;

class CTAOperation_SetFutureSpreadMinGainConExit_result {
 public:

  CTAOperation_SetFutureSpreadMinGainConExit_result(const CTAOperation_SetFutureSpreadMinGainConExit_result&);
  CTAOperation_SetFutureSpreadMinGainConExit_result& operator=(const CTAOperation_SetFutureSpreadMinGainConExit_result&);
  CTAOperation_SetFutureSpreadMinGainConExit_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMinGainConExit_result() throw();
  double success;

  _CTAOperation_SetFutureSpreadMinGainConExit_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadMinGainConExit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMinGainConExit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMinGainConExit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMinGainConExit_presult__isset {
  _CTAOperation_SetFutureSpreadMinGainConExit_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMinGainConExit_presult__isset;

class CTAOperation_SetFutureSpreadMinGainConExit_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadMinGainConExit_presult() throw();
  double* success;

  _CTAOperation_SetFutureSpreadMinGainConExit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadConMaxDistance_args__isset {
  _CTAOperation_SetFutureSpreadConMaxDistance_args__isset() : atsName(false), ConMaxDistance(false) {}
  bool atsName :1;
  bool ConMaxDistance :1;
} _CTAOperation_SetFutureSpreadConMaxDistance_args__isset;

class CTAOperation_SetFutureSpreadConMaxDistance_args {
 public:

  CTAOperation_SetFutureSpreadConMaxDistance_args(const CTAOperation_SetFutureSpreadConMaxDistance_args&);
  CTAOperation_SetFutureSpreadConMaxDistance_args& operator=(const CTAOperation_SetFutureSpreadConMaxDistance_args&);
  CTAOperation_SetFutureSpreadConMaxDistance_args() : atsName(), ConMaxDistance(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConMaxDistance_args() throw();
  std::string atsName;
  double ConMaxDistance;

  _CTAOperation_SetFutureSpreadConMaxDistance_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_ConMaxDistance(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadConMaxDistance_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(ConMaxDistance == rhs.ConMaxDistance))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConMaxDistance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConMaxDistance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadConMaxDistance_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadConMaxDistance_pargs() throw();
  const std::string* atsName;
  const double* ConMaxDistance;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConMaxDistance_result__isset {
  _CTAOperation_SetFutureSpreadConMaxDistance_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConMaxDistance_result__isset;

class CTAOperation_SetFutureSpreadConMaxDistance_result {
 public:

  CTAOperation_SetFutureSpreadConMaxDistance_result(const CTAOperation_SetFutureSpreadConMaxDistance_result&);
  CTAOperation_SetFutureSpreadConMaxDistance_result& operator=(const CTAOperation_SetFutureSpreadConMaxDistance_result&);
  CTAOperation_SetFutureSpreadConMaxDistance_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConMaxDistance_result() throw();
  double success;

  _CTAOperation_SetFutureSpreadConMaxDistance_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadConMaxDistance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConMaxDistance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConMaxDistance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConMaxDistance_presult__isset {
  _CTAOperation_SetFutureSpreadConMaxDistance_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConMaxDistance_presult__isset;

class CTAOperation_SetFutureSpreadConMaxDistance_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadConMaxDistance_presult() throw();
  double* success;

  _CTAOperation_SetFutureSpreadConMaxDistance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadFuture1Pos_args__isset {
  _CTAOperation_SetFutureSpreadFuture1Pos_args__isset() : atsName(false), Future1Pos(false) {}
  bool atsName :1;
  bool Future1Pos :1;
} _CTAOperation_SetFutureSpreadFuture1Pos_args__isset;

class CTAOperation_SetFutureSpreadFuture1Pos_args {
 public:

  CTAOperation_SetFutureSpreadFuture1Pos_args(const CTAOperation_SetFutureSpreadFuture1Pos_args&);
  CTAOperation_SetFutureSpreadFuture1Pos_args& operator=(const CTAOperation_SetFutureSpreadFuture1Pos_args&);
  CTAOperation_SetFutureSpreadFuture1Pos_args() : atsName(), Future1Pos(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadFuture1Pos_args() throw();
  std::string atsName;
  int32_t Future1Pos;

  _CTAOperation_SetFutureSpreadFuture1Pos_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_Future1Pos(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadFuture1Pos_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(Future1Pos == rhs.Future1Pos))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadFuture1Pos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadFuture1Pos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadFuture1Pos_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadFuture1Pos_pargs() throw();
  const std::string* atsName;
  const int32_t* Future1Pos;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadFuture1Pos_result__isset {
  _CTAOperation_SetFutureSpreadFuture1Pos_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadFuture1Pos_result__isset;

class CTAOperation_SetFutureSpreadFuture1Pos_result {
 public:

  CTAOperation_SetFutureSpreadFuture1Pos_result(const CTAOperation_SetFutureSpreadFuture1Pos_result&);
  CTAOperation_SetFutureSpreadFuture1Pos_result& operator=(const CTAOperation_SetFutureSpreadFuture1Pos_result&);
  CTAOperation_SetFutureSpreadFuture1Pos_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadFuture1Pos_result() throw();
  int32_t success;

  _CTAOperation_SetFutureSpreadFuture1Pos_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadFuture1Pos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadFuture1Pos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadFuture1Pos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadFuture1Pos_presult__isset {
  _CTAOperation_SetFutureSpreadFuture1Pos_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadFuture1Pos_presult__isset;

class CTAOperation_SetFutureSpreadFuture1Pos_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadFuture1Pos_presult() throw();
  int32_t* success;

  _CTAOperation_SetFutureSpreadFuture1Pos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadFuture2Pos_args__isset {
  _CTAOperation_SetFutureSpreadFuture2Pos_args__isset() : atsName(false), Future2Pos(false) {}
  bool atsName :1;
  bool Future2Pos :1;
} _CTAOperation_SetFutureSpreadFuture2Pos_args__isset;

class CTAOperation_SetFutureSpreadFuture2Pos_args {
 public:

  CTAOperation_SetFutureSpreadFuture2Pos_args(const CTAOperation_SetFutureSpreadFuture2Pos_args&);
  CTAOperation_SetFutureSpreadFuture2Pos_args& operator=(const CTAOperation_SetFutureSpreadFuture2Pos_args&);
  CTAOperation_SetFutureSpreadFuture2Pos_args() : atsName(), Future2Pos(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadFuture2Pos_args() throw();
  std::string atsName;
  int32_t Future2Pos;

  _CTAOperation_SetFutureSpreadFuture2Pos_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_Future2Pos(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadFuture2Pos_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(Future2Pos == rhs.Future2Pos))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadFuture2Pos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadFuture2Pos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadFuture2Pos_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadFuture2Pos_pargs() throw();
  const std::string* atsName;
  const int32_t* Future2Pos;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadFuture2Pos_result__isset {
  _CTAOperation_SetFutureSpreadFuture2Pos_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadFuture2Pos_result__isset;

class CTAOperation_SetFutureSpreadFuture2Pos_result {
 public:

  CTAOperation_SetFutureSpreadFuture2Pos_result(const CTAOperation_SetFutureSpreadFuture2Pos_result&);
  CTAOperation_SetFutureSpreadFuture2Pos_result& operator=(const CTAOperation_SetFutureSpreadFuture2Pos_result&);
  CTAOperation_SetFutureSpreadFuture2Pos_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadFuture2Pos_result() throw();
  int32_t success;

  _CTAOperation_SetFutureSpreadFuture2Pos_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadFuture2Pos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadFuture2Pos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadFuture2Pos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadFuture2Pos_presult__isset {
  _CTAOperation_SetFutureSpreadFuture2Pos_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadFuture2Pos_presult__isset;

class CTAOperation_SetFutureSpreadFuture2Pos_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadFuture2Pos_presult() throw();
  int32_t* success;

  _CTAOperation_SetFutureSpreadFuture2Pos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadMaxNumOrders_args__isset {
  _CTAOperation_SetFutureSpreadMaxNumOrders_args__isset() : atsName(false), MaxNumOrders(false) {}
  bool atsName :1;
  bool MaxNumOrders :1;
} _CTAOperation_SetFutureSpreadMaxNumOrders_args__isset;

class CTAOperation_SetFutureSpreadMaxNumOrders_args {
 public:

  CTAOperation_SetFutureSpreadMaxNumOrders_args(const CTAOperation_SetFutureSpreadMaxNumOrders_args&);
  CTAOperation_SetFutureSpreadMaxNumOrders_args& operator=(const CTAOperation_SetFutureSpreadMaxNumOrders_args&);
  CTAOperation_SetFutureSpreadMaxNumOrders_args() : atsName(), MaxNumOrders(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMaxNumOrders_args() throw();
  std::string atsName;
  int32_t MaxNumOrders;

  _CTAOperation_SetFutureSpreadMaxNumOrders_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_MaxNumOrders(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadMaxNumOrders_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(MaxNumOrders == rhs.MaxNumOrders))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMaxNumOrders_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMaxNumOrders_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadMaxNumOrders_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadMaxNumOrders_pargs() throw();
  const std::string* atsName;
  const int32_t* MaxNumOrders;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMaxNumOrders_result__isset {
  _CTAOperation_SetFutureSpreadMaxNumOrders_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMaxNumOrders_result__isset;

class CTAOperation_SetFutureSpreadMaxNumOrders_result {
 public:

  CTAOperation_SetFutureSpreadMaxNumOrders_result(const CTAOperation_SetFutureSpreadMaxNumOrders_result&);
  CTAOperation_SetFutureSpreadMaxNumOrders_result& operator=(const CTAOperation_SetFutureSpreadMaxNumOrders_result&);
  CTAOperation_SetFutureSpreadMaxNumOrders_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMaxNumOrders_result() throw();
  int32_t success;

  _CTAOperation_SetFutureSpreadMaxNumOrders_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadMaxNumOrders_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMaxNumOrders_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMaxNumOrders_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMaxNumOrders_presult__isset {
  _CTAOperation_SetFutureSpreadMaxNumOrders_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMaxNumOrders_presult__isset;

class CTAOperation_SetFutureSpreadMaxNumOrders_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadMaxNumOrders_presult() throw();
  int32_t* success;

  _CTAOperation_SetFutureSpreadMaxNumOrders_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadMaxPos_args__isset {
  _CTAOperation_SetFutureSpreadMaxPos_args__isset() : atsName(false), MaxPos(false) {}
  bool atsName :1;
  bool MaxPos :1;
} _CTAOperation_SetFutureSpreadMaxPos_args__isset;

class CTAOperation_SetFutureSpreadMaxPos_args {
 public:

  CTAOperation_SetFutureSpreadMaxPos_args(const CTAOperation_SetFutureSpreadMaxPos_args&);
  CTAOperation_SetFutureSpreadMaxPos_args& operator=(const CTAOperation_SetFutureSpreadMaxPos_args&);
  CTAOperation_SetFutureSpreadMaxPos_args() : atsName(), MaxPos(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMaxPos_args() throw();
  std::string atsName;
  int32_t MaxPos;

  _CTAOperation_SetFutureSpreadMaxPos_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_MaxPos(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadMaxPos_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(MaxPos == rhs.MaxPos))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMaxPos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMaxPos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadMaxPos_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadMaxPos_pargs() throw();
  const std::string* atsName;
  const int32_t* MaxPos;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMaxPos_result__isset {
  _CTAOperation_SetFutureSpreadMaxPos_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMaxPos_result__isset;

class CTAOperation_SetFutureSpreadMaxPos_result {
 public:

  CTAOperation_SetFutureSpreadMaxPos_result(const CTAOperation_SetFutureSpreadMaxPos_result&);
  CTAOperation_SetFutureSpreadMaxPos_result& operator=(const CTAOperation_SetFutureSpreadMaxPos_result&);
  CTAOperation_SetFutureSpreadMaxPos_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadMaxPos_result() throw();
  int32_t success;

  _CTAOperation_SetFutureSpreadMaxPos_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CTAOperation_SetFutureSpreadMaxPos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadMaxPos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadMaxPos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadMaxPos_presult__isset {
  _CTAOperation_SetFutureSpreadMaxPos_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadMaxPos_presult__isset;

class CTAOperation_SetFutureSpreadMaxPos_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadMaxPos_presult() throw();
  int32_t* success;

  _CTAOperation_SetFutureSpreadMaxPos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadUseMarketOrder_args__isset {
  _CTAOperation_SetFutureSpreadUseMarketOrder_args__isset() : atsName(false), useMarketORder(false) {}
  bool atsName :1;
  bool useMarketORder :1;
} _CTAOperation_SetFutureSpreadUseMarketOrder_args__isset;

class CTAOperation_SetFutureSpreadUseMarketOrder_args {
 public:

  CTAOperation_SetFutureSpreadUseMarketOrder_args(const CTAOperation_SetFutureSpreadUseMarketOrder_args&);
  CTAOperation_SetFutureSpreadUseMarketOrder_args& operator=(const CTAOperation_SetFutureSpreadUseMarketOrder_args&);
  CTAOperation_SetFutureSpreadUseMarketOrder_args() : atsName(), useMarketORder(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadUseMarketOrder_args() throw();
  std::string atsName;
  bool useMarketORder;

  _CTAOperation_SetFutureSpreadUseMarketOrder_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_useMarketORder(const bool val);

  bool operator == (const CTAOperation_SetFutureSpreadUseMarketOrder_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(useMarketORder == rhs.useMarketORder))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadUseMarketOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadUseMarketOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadUseMarketOrder_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadUseMarketOrder_pargs() throw();
  const std::string* atsName;
  const bool* useMarketORder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadUseMarketOrder_result__isset {
  _CTAOperation_SetFutureSpreadUseMarketOrder_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadUseMarketOrder_result__isset;

class CTAOperation_SetFutureSpreadUseMarketOrder_result {
 public:

  CTAOperation_SetFutureSpreadUseMarketOrder_result(const CTAOperation_SetFutureSpreadUseMarketOrder_result&);
  CTAOperation_SetFutureSpreadUseMarketOrder_result& operator=(const CTAOperation_SetFutureSpreadUseMarketOrder_result&);
  CTAOperation_SetFutureSpreadUseMarketOrder_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadUseMarketOrder_result() throw();
  bool success;

  _CTAOperation_SetFutureSpreadUseMarketOrder_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetFutureSpreadUseMarketOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadUseMarketOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadUseMarketOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadUseMarketOrder_presult__isset {
  _CTAOperation_SetFutureSpreadUseMarketOrder_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadUseMarketOrder_presult__isset;

class CTAOperation_SetFutureSpreadUseMarketOrder_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadUseMarketOrder_presult() throw();
  bool* success;

  _CTAOperation_SetFutureSpreadUseMarketOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadPosConvex_args__isset {
  _CTAOperation_SetFutureSpreadPosConvex_args__isset() : atsName(false), posConvex(false) {}
  bool atsName :1;
  bool posConvex :1;
} _CTAOperation_SetFutureSpreadPosConvex_args__isset;

class CTAOperation_SetFutureSpreadPosConvex_args {
 public:

  CTAOperation_SetFutureSpreadPosConvex_args(const CTAOperation_SetFutureSpreadPosConvex_args&);
  CTAOperation_SetFutureSpreadPosConvex_args& operator=(const CTAOperation_SetFutureSpreadPosConvex_args&);
  CTAOperation_SetFutureSpreadPosConvex_args() : atsName(), posConvex(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadPosConvex_args() throw();
  std::string atsName;
  double posConvex;

  _CTAOperation_SetFutureSpreadPosConvex_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_posConvex(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadPosConvex_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(posConvex == rhs.posConvex))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadPosConvex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadPosConvex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadPosConvex_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadPosConvex_pargs() throw();
  const std::string* atsName;
  const double* posConvex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadPosConvex_result__isset {
  _CTAOperation_SetFutureSpreadPosConvex_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadPosConvex_result__isset;

class CTAOperation_SetFutureSpreadPosConvex_result {
 public:

  CTAOperation_SetFutureSpreadPosConvex_result(const CTAOperation_SetFutureSpreadPosConvex_result&);
  CTAOperation_SetFutureSpreadPosConvex_result& operator=(const CTAOperation_SetFutureSpreadPosConvex_result&);
  CTAOperation_SetFutureSpreadPosConvex_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadPosConvex_result() throw();
  double success;

  _CTAOperation_SetFutureSpreadPosConvex_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadPosConvex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadPosConvex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadPosConvex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadPosConvex_presult__isset {
  _CTAOperation_SetFutureSpreadPosConvex_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadPosConvex_presult__isset;

class CTAOperation_SetFutureSpreadPosConvex_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadPosConvex_presult() throw();
  double* success;

  _CTAOperation_SetFutureSpreadPosConvex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args__isset {
  _CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args__isset() : atsName(false), IgnoreUpDnLimit(false) {}
  bool atsName :1;
  bool IgnoreUpDnLimit :1;
} _CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args__isset;

class CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args {
 public:

  CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args(const CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args&);
  CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args& operator=(const CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args&);
  CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args() : atsName(), IgnoreUpDnLimit(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args() throw();
  std::string atsName;
  bool IgnoreUpDnLimit;

  _CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_IgnoreUpDnLimit(const bool val);

  bool operator == (const CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(IgnoreUpDnLimit == rhs.IgnoreUpDnLimit))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadIgnoreUpDnLimit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadIgnoreUpDnLimit_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadIgnoreUpDnLimit_pargs() throw();
  const std::string* atsName;
  const bool* IgnoreUpDnLimit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result__isset {
  _CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result__isset;

class CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result {
 public:

  CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result(const CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result&);
  CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result& operator=(const CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result&);
  CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result() throw();
  bool success;

  _CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadIgnoreUpDnLimit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadIgnoreUpDnLimit_presult__isset {
  _CTAOperation_SetFutureSpreadIgnoreUpDnLimit_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadIgnoreUpDnLimit_presult__isset;

class CTAOperation_SetFutureSpreadIgnoreUpDnLimit_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadIgnoreUpDnLimit_presult() throw();
  bool* success;

  _CTAOperation_SetFutureSpreadIgnoreUpDnLimit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadConvergeRate_args__isset {
  _CTAOperation_SetFutureSpreadConvergeRate_args__isset() : atsName(false), ConvergeRate(false) {}
  bool atsName :1;
  bool ConvergeRate :1;
} _CTAOperation_SetFutureSpreadConvergeRate_args__isset;

class CTAOperation_SetFutureSpreadConvergeRate_args {
 public:

  CTAOperation_SetFutureSpreadConvergeRate_args(const CTAOperation_SetFutureSpreadConvergeRate_args&);
  CTAOperation_SetFutureSpreadConvergeRate_args& operator=(const CTAOperation_SetFutureSpreadConvergeRate_args&);
  CTAOperation_SetFutureSpreadConvergeRate_args() : atsName(), ConvergeRate(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConvergeRate_args() throw();
  std::string atsName;
  double ConvergeRate;

  _CTAOperation_SetFutureSpreadConvergeRate_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_ConvergeRate(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadConvergeRate_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(ConvergeRate == rhs.ConvergeRate))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConvergeRate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConvergeRate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadConvergeRate_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadConvergeRate_pargs() throw();
  const std::string* atsName;
  const double* ConvergeRate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConvergeRate_result__isset {
  _CTAOperation_SetFutureSpreadConvergeRate_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConvergeRate_result__isset;

class CTAOperation_SetFutureSpreadConvergeRate_result {
 public:

  CTAOperation_SetFutureSpreadConvergeRate_result(const CTAOperation_SetFutureSpreadConvergeRate_result&);
  CTAOperation_SetFutureSpreadConvergeRate_result& operator=(const CTAOperation_SetFutureSpreadConvergeRate_result&);
  CTAOperation_SetFutureSpreadConvergeRate_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadConvergeRate_result() throw();
  double success;

  _CTAOperation_SetFutureSpreadConvergeRate_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadConvergeRate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadConvergeRate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadConvergeRate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadConvergeRate_presult__isset {
  _CTAOperation_SetFutureSpreadConvergeRate_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadConvergeRate_presult__isset;

class CTAOperation_SetFutureSpreadConvergeRate_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadConvergeRate_presult() throw();
  double* success;

  _CTAOperation_SetFutureSpreadConvergeRate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadFastConvergeRate_args__isset {
  _CTAOperation_SetFutureSpreadFastConvergeRate_args__isset() : atsName(false), FastConvergeRate(false) {}
  bool atsName :1;
  bool FastConvergeRate :1;
} _CTAOperation_SetFutureSpreadFastConvergeRate_args__isset;

class CTAOperation_SetFutureSpreadFastConvergeRate_args {
 public:

  CTAOperation_SetFutureSpreadFastConvergeRate_args(const CTAOperation_SetFutureSpreadFastConvergeRate_args&);
  CTAOperation_SetFutureSpreadFastConvergeRate_args& operator=(const CTAOperation_SetFutureSpreadFastConvergeRate_args&);
  CTAOperation_SetFutureSpreadFastConvergeRate_args() : atsName(), FastConvergeRate(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadFastConvergeRate_args() throw();
  std::string atsName;
  double FastConvergeRate;

  _CTAOperation_SetFutureSpreadFastConvergeRate_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_FastConvergeRate(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadFastConvergeRate_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(FastConvergeRate == rhs.FastConvergeRate))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadFastConvergeRate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadFastConvergeRate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadFastConvergeRate_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadFastConvergeRate_pargs() throw();
  const std::string* atsName;
  const double* FastConvergeRate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadFastConvergeRate_result__isset {
  _CTAOperation_SetFutureSpreadFastConvergeRate_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadFastConvergeRate_result__isset;

class CTAOperation_SetFutureSpreadFastConvergeRate_result {
 public:

  CTAOperation_SetFutureSpreadFastConvergeRate_result(const CTAOperation_SetFutureSpreadFastConvergeRate_result&);
  CTAOperation_SetFutureSpreadFastConvergeRate_result& operator=(const CTAOperation_SetFutureSpreadFastConvergeRate_result&);
  CTAOperation_SetFutureSpreadFastConvergeRate_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadFastConvergeRate_result() throw();
  double success;

  _CTAOperation_SetFutureSpreadFastConvergeRate_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadFastConvergeRate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadFastConvergeRate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadFastConvergeRate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadFastConvergeRate_presult__isset {
  _CTAOperation_SetFutureSpreadFastConvergeRate_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadFastConvergeRate_presult__isset;

class CTAOperation_SetFutureSpreadFastConvergeRate_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadFastConvergeRate_presult() throw();
  double* success;

  _CTAOperation_SetFutureSpreadFastConvergeRate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpreadRatio_args__isset {
  _CTAOperation_SetFutureSpreadRatio_args__isset() : atsName(false), Ratio(false) {}
  bool atsName :1;
  bool Ratio :1;
} _CTAOperation_SetFutureSpreadRatio_args__isset;

class CTAOperation_SetFutureSpreadRatio_args {
 public:

  CTAOperation_SetFutureSpreadRatio_args(const CTAOperation_SetFutureSpreadRatio_args&);
  CTAOperation_SetFutureSpreadRatio_args& operator=(const CTAOperation_SetFutureSpreadRatio_args&);
  CTAOperation_SetFutureSpreadRatio_args() : atsName(), Ratio(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadRatio_args() throw();
  std::string atsName;
  double Ratio;

  _CTAOperation_SetFutureSpreadRatio_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_Ratio(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadRatio_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(Ratio == rhs.Ratio))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadRatio_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadRatio_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpreadRatio_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpreadRatio_pargs() throw();
  const std::string* atsName;
  const double* Ratio;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadRatio_result__isset {
  _CTAOperation_SetFutureSpreadRatio_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadRatio_result__isset;

class CTAOperation_SetFutureSpreadRatio_result {
 public:

  CTAOperation_SetFutureSpreadRatio_result(const CTAOperation_SetFutureSpreadRatio_result&);
  CTAOperation_SetFutureSpreadRatio_result& operator=(const CTAOperation_SetFutureSpreadRatio_result&);
  CTAOperation_SetFutureSpreadRatio_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpreadRatio_result() throw();
  double success;

  _CTAOperation_SetFutureSpreadRatio_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureSpreadRatio_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpreadRatio_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpreadRatio_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpreadRatio_presult__isset {
  _CTAOperation_SetFutureSpreadRatio_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpreadRatio_presult__isset;

class CTAOperation_SetFutureSpreadRatio_presult {
 public:


  virtual ~CTAOperation_SetFutureSpreadRatio_presult() throw();
  double* success;

  _CTAOperation_SetFutureSpreadRatio_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetAtsFutureSpreadFut1_args__isset {
  _CTAOperation_SetAtsFutureSpreadFut1_args__isset() : atsName(false), code(false) {}
  bool atsName :1;
  bool code :1;
} _CTAOperation_SetAtsFutureSpreadFut1_args__isset;

class CTAOperation_SetAtsFutureSpreadFut1_args {
 public:

  CTAOperation_SetAtsFutureSpreadFut1_args(const CTAOperation_SetAtsFutureSpreadFut1_args&);
  CTAOperation_SetAtsFutureSpreadFut1_args& operator=(const CTAOperation_SetAtsFutureSpreadFut1_args&);
  CTAOperation_SetAtsFutureSpreadFut1_args() : atsName(), code() {
  }

  virtual ~CTAOperation_SetAtsFutureSpreadFut1_args() throw();
  std::string atsName;
  std::string code;

  _CTAOperation_SetAtsFutureSpreadFut1_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_code(const std::string& val);

  bool operator == (const CTAOperation_SetAtsFutureSpreadFut1_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetAtsFutureSpreadFut1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetAtsFutureSpreadFut1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetAtsFutureSpreadFut1_pargs {
 public:


  virtual ~CTAOperation_SetAtsFutureSpreadFut1_pargs() throw();
  const std::string* atsName;
  const std::string* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetAtsFutureSpreadFut1_result__isset {
  _CTAOperation_SetAtsFutureSpreadFut1_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetAtsFutureSpreadFut1_result__isset;

class CTAOperation_SetAtsFutureSpreadFut1_result {
 public:

  CTAOperation_SetAtsFutureSpreadFut1_result(const CTAOperation_SetAtsFutureSpreadFut1_result&);
  CTAOperation_SetAtsFutureSpreadFut1_result& operator=(const CTAOperation_SetAtsFutureSpreadFut1_result&);
  CTAOperation_SetAtsFutureSpreadFut1_result() : success() {
  }

  virtual ~CTAOperation_SetAtsFutureSpreadFut1_result() throw();
  std::string success;

  _CTAOperation_SetAtsFutureSpreadFut1_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const CTAOperation_SetAtsFutureSpreadFut1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetAtsFutureSpreadFut1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetAtsFutureSpreadFut1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetAtsFutureSpreadFut1_presult__isset {
  _CTAOperation_SetAtsFutureSpreadFut1_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetAtsFutureSpreadFut1_presult__isset;

class CTAOperation_SetAtsFutureSpreadFut1_presult {
 public:


  virtual ~CTAOperation_SetAtsFutureSpreadFut1_presult() throw();
  std::string* success;

  _CTAOperation_SetAtsFutureSpreadFut1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetAtsFutureSpreadFut2_args__isset {
  _CTAOperation_SetAtsFutureSpreadFut2_args__isset() : atsName(false), code(false) {}
  bool atsName :1;
  bool code :1;
} _CTAOperation_SetAtsFutureSpreadFut2_args__isset;

class CTAOperation_SetAtsFutureSpreadFut2_args {
 public:

  CTAOperation_SetAtsFutureSpreadFut2_args(const CTAOperation_SetAtsFutureSpreadFut2_args&);
  CTAOperation_SetAtsFutureSpreadFut2_args& operator=(const CTAOperation_SetAtsFutureSpreadFut2_args&);
  CTAOperation_SetAtsFutureSpreadFut2_args() : atsName(), code() {
  }

  virtual ~CTAOperation_SetAtsFutureSpreadFut2_args() throw();
  std::string atsName;
  std::string code;

  _CTAOperation_SetAtsFutureSpreadFut2_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_code(const std::string& val);

  bool operator == (const CTAOperation_SetAtsFutureSpreadFut2_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetAtsFutureSpreadFut2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetAtsFutureSpreadFut2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetAtsFutureSpreadFut2_pargs {
 public:


  virtual ~CTAOperation_SetAtsFutureSpreadFut2_pargs() throw();
  const std::string* atsName;
  const std::string* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetAtsFutureSpreadFut2_result__isset {
  _CTAOperation_SetAtsFutureSpreadFut2_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetAtsFutureSpreadFut2_result__isset;

class CTAOperation_SetAtsFutureSpreadFut2_result {
 public:

  CTAOperation_SetAtsFutureSpreadFut2_result(const CTAOperation_SetAtsFutureSpreadFut2_result&);
  CTAOperation_SetAtsFutureSpreadFut2_result& operator=(const CTAOperation_SetAtsFutureSpreadFut2_result&);
  CTAOperation_SetAtsFutureSpreadFut2_result() : success() {
  }

  virtual ~CTAOperation_SetAtsFutureSpreadFut2_result() throw();
  std::string success;

  _CTAOperation_SetAtsFutureSpreadFut2_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const CTAOperation_SetAtsFutureSpreadFut2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetAtsFutureSpreadFut2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetAtsFutureSpreadFut2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetAtsFutureSpreadFut2_presult__isset {
  _CTAOperation_SetAtsFutureSpreadFut2_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetAtsFutureSpreadFut2_presult__isset;

class CTAOperation_SetAtsFutureSpreadFut2_presult {
 public:


  virtual ~CTAOperation_SetAtsFutureSpreadFut2_presult() throw();
  std::string* success;

  _CTAOperation_SetAtsFutureSpreadFut2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetAtsFutureSpreadLastKLineTime_args__isset {
  _CTAOperation_SetAtsFutureSpreadLastKLineTime_args__isset() : atsName(false), KLineTime(false) {}
  bool atsName :1;
  bool KLineTime :1;
} _CTAOperation_SetAtsFutureSpreadLastKLineTime_args__isset;

class CTAOperation_SetAtsFutureSpreadLastKLineTime_args {
 public:

  CTAOperation_SetAtsFutureSpreadLastKLineTime_args(const CTAOperation_SetAtsFutureSpreadLastKLineTime_args&);
  CTAOperation_SetAtsFutureSpreadLastKLineTime_args& operator=(const CTAOperation_SetAtsFutureSpreadLastKLineTime_args&);
  CTAOperation_SetAtsFutureSpreadLastKLineTime_args() : atsName(), KLineTime() {
  }

  virtual ~CTAOperation_SetAtsFutureSpreadLastKLineTime_args() throw();
  std::string atsName;
  std::string KLineTime;

  _CTAOperation_SetAtsFutureSpreadLastKLineTime_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_KLineTime(const std::string& val);

  bool operator == (const CTAOperation_SetAtsFutureSpreadLastKLineTime_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(KLineTime == rhs.KLineTime))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetAtsFutureSpreadLastKLineTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetAtsFutureSpreadLastKLineTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetAtsFutureSpreadLastKLineTime_pargs {
 public:


  virtual ~CTAOperation_SetAtsFutureSpreadLastKLineTime_pargs() throw();
  const std::string* atsName;
  const std::string* KLineTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetAtsFutureSpreadLastKLineTime_result__isset {
  _CTAOperation_SetAtsFutureSpreadLastKLineTime_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetAtsFutureSpreadLastKLineTime_result__isset;

class CTAOperation_SetAtsFutureSpreadLastKLineTime_result {
 public:

  CTAOperation_SetAtsFutureSpreadLastKLineTime_result(const CTAOperation_SetAtsFutureSpreadLastKLineTime_result&);
  CTAOperation_SetAtsFutureSpreadLastKLineTime_result& operator=(const CTAOperation_SetAtsFutureSpreadLastKLineTime_result&);
  CTAOperation_SetAtsFutureSpreadLastKLineTime_result() : success() {
  }

  virtual ~CTAOperation_SetAtsFutureSpreadLastKLineTime_result() throw();
  std::string success;

  _CTAOperation_SetAtsFutureSpreadLastKLineTime_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const CTAOperation_SetAtsFutureSpreadLastKLineTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetAtsFutureSpreadLastKLineTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetAtsFutureSpreadLastKLineTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetAtsFutureSpreadLastKLineTime_presult__isset {
  _CTAOperation_SetAtsFutureSpreadLastKLineTime_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetAtsFutureSpreadLastKLineTime_presult__isset;

class CTAOperation_SetAtsFutureSpreadLastKLineTime_presult {
 public:


  virtual ~CTAOperation_SetAtsFutureSpreadLastKLineTime_presult() throw();
  std::string* success;

  _CTAOperation_SetAtsFutureSpreadLastKLineTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetAtsFutureSpreadKInterval_args__isset {
  _CTAOperation_SetAtsFutureSpreadKInterval_args__isset() : atsName(false), KInterval(false) {}
  bool atsName :1;
  bool KInterval :1;
} _CTAOperation_SetAtsFutureSpreadKInterval_args__isset;

class CTAOperation_SetAtsFutureSpreadKInterval_args {
 public:

  CTAOperation_SetAtsFutureSpreadKInterval_args(const CTAOperation_SetAtsFutureSpreadKInterval_args&);
  CTAOperation_SetAtsFutureSpreadKInterval_args& operator=(const CTAOperation_SetAtsFutureSpreadKInterval_args&);
  CTAOperation_SetAtsFutureSpreadKInterval_args() : atsName(), KInterval() {
  }

  virtual ~CTAOperation_SetAtsFutureSpreadKInterval_args() throw();
  std::string atsName;
  std::string KInterval;

  _CTAOperation_SetAtsFutureSpreadKInterval_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_KInterval(const std::string& val);

  bool operator == (const CTAOperation_SetAtsFutureSpreadKInterval_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(KInterval == rhs.KInterval))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetAtsFutureSpreadKInterval_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetAtsFutureSpreadKInterval_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetAtsFutureSpreadKInterval_pargs {
 public:


  virtual ~CTAOperation_SetAtsFutureSpreadKInterval_pargs() throw();
  const std::string* atsName;
  const std::string* KInterval;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetAtsFutureSpreadKInterval_result__isset {
  _CTAOperation_SetAtsFutureSpreadKInterval_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetAtsFutureSpreadKInterval_result__isset;

class CTAOperation_SetAtsFutureSpreadKInterval_result {
 public:

  CTAOperation_SetAtsFutureSpreadKInterval_result(const CTAOperation_SetAtsFutureSpreadKInterval_result&);
  CTAOperation_SetAtsFutureSpreadKInterval_result& operator=(const CTAOperation_SetAtsFutureSpreadKInterval_result&);
  CTAOperation_SetAtsFutureSpreadKInterval_result() : success() {
  }

  virtual ~CTAOperation_SetAtsFutureSpreadKInterval_result() throw();
  std::string success;

  _CTAOperation_SetAtsFutureSpreadKInterval_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const CTAOperation_SetAtsFutureSpreadKInterval_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetAtsFutureSpreadKInterval_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetAtsFutureSpreadKInterval_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetAtsFutureSpreadKInterval_presult__isset {
  _CTAOperation_SetAtsFutureSpreadKInterval_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetAtsFutureSpreadKInterval_presult__isset;

class CTAOperation_SetAtsFutureSpreadKInterval_presult {
 public:


  virtual ~CTAOperation_SetAtsFutureSpreadKInterval_presult() throw();
  std::string* success;

  _CTAOperation_SetAtsFutureSpreadKInterval_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_CreateAutomaton_args__isset {
  _CTAOperation_CreateAutomaton_args__isset() : automatonName(false), underlyingName(false), subscrib_list(false), feedsourcesStr(false), connectionsStr(false) {}
  bool automatonName :1;
  bool underlyingName :1;
  bool subscrib_list :1;
  bool feedsourcesStr :1;
  bool connectionsStr :1;
} _CTAOperation_CreateAutomaton_args__isset;

class CTAOperation_CreateAutomaton_args {
 public:

  CTAOperation_CreateAutomaton_args(const CTAOperation_CreateAutomaton_args&);
  CTAOperation_CreateAutomaton_args& operator=(const CTAOperation_CreateAutomaton_args&);
  CTAOperation_CreateAutomaton_args() : automatonName(), underlyingName(), subscrib_list(), feedsourcesStr(), connectionsStr() {
  }

  virtual ~CTAOperation_CreateAutomaton_args() throw();
  std::string automatonName;
  std::string underlyingName;
  std::string subscrib_list;
  std::string feedsourcesStr;
  std::string connectionsStr;

  _CTAOperation_CreateAutomaton_args__isset __isset;

  void __set_automatonName(const std::string& val);

  void __set_underlyingName(const std::string& val);

  void __set_subscrib_list(const std::string& val);

  void __set_feedsourcesStr(const std::string& val);

  void __set_connectionsStr(const std::string& val);

  bool operator == (const CTAOperation_CreateAutomaton_args & rhs) const
  {
    if (!(automatonName == rhs.automatonName))
      return false;
    if (!(underlyingName == rhs.underlyingName))
      return false;
    if (!(subscrib_list == rhs.subscrib_list))
      return false;
    if (!(feedsourcesStr == rhs.feedsourcesStr))
      return false;
    if (!(connectionsStr == rhs.connectionsStr))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_CreateAutomaton_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_CreateAutomaton_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_CreateAutomaton_pargs {
 public:


  virtual ~CTAOperation_CreateAutomaton_pargs() throw();
  const std::string* automatonName;
  const std::string* underlyingName;
  const std::string* subscrib_list;
  const std::string* feedsourcesStr;
  const std::string* connectionsStr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_CreateAutomaton_result__isset {
  _CTAOperation_CreateAutomaton_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_CreateAutomaton_result__isset;

class CTAOperation_CreateAutomaton_result {
 public:

  CTAOperation_CreateAutomaton_result(const CTAOperation_CreateAutomaton_result&);
  CTAOperation_CreateAutomaton_result& operator=(const CTAOperation_CreateAutomaton_result&);
  CTAOperation_CreateAutomaton_result() {
  }

  virtual ~CTAOperation_CreateAutomaton_result() throw();
  CTAAtsMsg success;

  _CTAOperation_CreateAutomaton_result__isset __isset;

  void __set_success(const CTAAtsMsg& val);

  bool operator == (const CTAOperation_CreateAutomaton_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_CreateAutomaton_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_CreateAutomaton_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_CreateAutomaton_presult__isset {
  _CTAOperation_CreateAutomaton_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_CreateAutomaton_presult__isset;

class CTAOperation_CreateAutomaton_presult {
 public:


  virtual ~CTAOperation_CreateAutomaton_presult() throw();
  CTAAtsMsg* success;

  _CTAOperation_CreateAutomaton_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SpreadBidHitTrade_args__isset {
  _CTAOperation_SpreadBidHitTrade_args__isset() : atsName(false) {}
  bool atsName :1;
} _CTAOperation_SpreadBidHitTrade_args__isset;

class CTAOperation_SpreadBidHitTrade_args {
 public:

  CTAOperation_SpreadBidHitTrade_args(const CTAOperation_SpreadBidHitTrade_args&);
  CTAOperation_SpreadBidHitTrade_args& operator=(const CTAOperation_SpreadBidHitTrade_args&);
  CTAOperation_SpreadBidHitTrade_args() : atsName() {
  }

  virtual ~CTAOperation_SpreadBidHitTrade_args() throw();
  std::string atsName;

  _CTAOperation_SpreadBidHitTrade_args__isset __isset;

  void __set_atsName(const std::string& val);

  bool operator == (const CTAOperation_SpreadBidHitTrade_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SpreadBidHitTrade_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SpreadBidHitTrade_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SpreadBidHitTrade_pargs {
 public:


  virtual ~CTAOperation_SpreadBidHitTrade_pargs() throw();
  const std::string* atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SpreadBidHitTrade_result {
 public:

  CTAOperation_SpreadBidHitTrade_result(const CTAOperation_SpreadBidHitTrade_result&);
  CTAOperation_SpreadBidHitTrade_result& operator=(const CTAOperation_SpreadBidHitTrade_result&);
  CTAOperation_SpreadBidHitTrade_result() {
  }

  virtual ~CTAOperation_SpreadBidHitTrade_result() throw();

  bool operator == (const CTAOperation_SpreadBidHitTrade_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CTAOperation_SpreadBidHitTrade_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SpreadBidHitTrade_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SpreadBidHitTrade_presult {
 public:


  virtual ~CTAOperation_SpreadBidHitTrade_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SpreadAskHitTrade_args__isset {
  _CTAOperation_SpreadAskHitTrade_args__isset() : atsName(false) {}
  bool atsName :1;
} _CTAOperation_SpreadAskHitTrade_args__isset;

class CTAOperation_SpreadAskHitTrade_args {
 public:

  CTAOperation_SpreadAskHitTrade_args(const CTAOperation_SpreadAskHitTrade_args&);
  CTAOperation_SpreadAskHitTrade_args& operator=(const CTAOperation_SpreadAskHitTrade_args&);
  CTAOperation_SpreadAskHitTrade_args() : atsName() {
  }

  virtual ~CTAOperation_SpreadAskHitTrade_args() throw();
  std::string atsName;

  _CTAOperation_SpreadAskHitTrade_args__isset __isset;

  void __set_atsName(const std::string& val);

  bool operator == (const CTAOperation_SpreadAskHitTrade_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SpreadAskHitTrade_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SpreadAskHitTrade_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SpreadAskHitTrade_pargs {
 public:


  virtual ~CTAOperation_SpreadAskHitTrade_pargs() throw();
  const std::string* atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SpreadAskHitTrade_result {
 public:

  CTAOperation_SpreadAskHitTrade_result(const CTAOperation_SpreadAskHitTrade_result&);
  CTAOperation_SpreadAskHitTrade_result& operator=(const CTAOperation_SpreadAskHitTrade_result&);
  CTAOperation_SpreadAskHitTrade_result() {
  }

  virtual ~CTAOperation_SpreadAskHitTrade_result() throw();

  bool operator == (const CTAOperation_SpreadAskHitTrade_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CTAOperation_SpreadAskHitTrade_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SpreadAskHitTrade_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SpreadAskHitTrade_presult {
 public:


  virtual ~CTAOperation_SpreadAskHitTrade_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SpreadBidConTrade_args__isset {
  _CTAOperation_SpreadBidConTrade_args__isset() : atsName(false) {}
  bool atsName :1;
} _CTAOperation_SpreadBidConTrade_args__isset;

class CTAOperation_SpreadBidConTrade_args {
 public:

  CTAOperation_SpreadBidConTrade_args(const CTAOperation_SpreadBidConTrade_args&);
  CTAOperation_SpreadBidConTrade_args& operator=(const CTAOperation_SpreadBidConTrade_args&);
  CTAOperation_SpreadBidConTrade_args() : atsName() {
  }

  virtual ~CTAOperation_SpreadBidConTrade_args() throw();
  std::string atsName;

  _CTAOperation_SpreadBidConTrade_args__isset __isset;

  void __set_atsName(const std::string& val);

  bool operator == (const CTAOperation_SpreadBidConTrade_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SpreadBidConTrade_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SpreadBidConTrade_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SpreadBidConTrade_pargs {
 public:


  virtual ~CTAOperation_SpreadBidConTrade_pargs() throw();
  const std::string* atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SpreadBidConTrade_result {
 public:

  CTAOperation_SpreadBidConTrade_result(const CTAOperation_SpreadBidConTrade_result&);
  CTAOperation_SpreadBidConTrade_result& operator=(const CTAOperation_SpreadBidConTrade_result&);
  CTAOperation_SpreadBidConTrade_result() {
  }

  virtual ~CTAOperation_SpreadBidConTrade_result() throw();

  bool operator == (const CTAOperation_SpreadBidConTrade_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CTAOperation_SpreadBidConTrade_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SpreadBidConTrade_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SpreadBidConTrade_presult {
 public:


  virtual ~CTAOperation_SpreadBidConTrade_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SpreadAskConTrade_args__isset {
  _CTAOperation_SpreadAskConTrade_args__isset() : atsName(false) {}
  bool atsName :1;
} _CTAOperation_SpreadAskConTrade_args__isset;

class CTAOperation_SpreadAskConTrade_args {
 public:

  CTAOperation_SpreadAskConTrade_args(const CTAOperation_SpreadAskConTrade_args&);
  CTAOperation_SpreadAskConTrade_args& operator=(const CTAOperation_SpreadAskConTrade_args&);
  CTAOperation_SpreadAskConTrade_args() : atsName() {
  }

  virtual ~CTAOperation_SpreadAskConTrade_args() throw();
  std::string atsName;

  _CTAOperation_SpreadAskConTrade_args__isset __isset;

  void __set_atsName(const std::string& val);

  bool operator == (const CTAOperation_SpreadAskConTrade_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SpreadAskConTrade_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SpreadAskConTrade_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SpreadAskConTrade_pargs {
 public:


  virtual ~CTAOperation_SpreadAskConTrade_pargs() throw();
  const std::string* atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SpreadAskConTrade_result {
 public:

  CTAOperation_SpreadAskConTrade_result(const CTAOperation_SpreadAskConTrade_result&);
  CTAOperation_SpreadAskConTrade_result& operator=(const CTAOperation_SpreadAskConTrade_result&);
  CTAOperation_SpreadAskConTrade_result() {
  }

  virtual ~CTAOperation_SpreadAskConTrade_result() throw();

  bool operator == (const CTAOperation_SpreadAskConTrade_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CTAOperation_SpreadAskConTrade_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SpreadAskConTrade_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SpreadAskConTrade_presult {
 public:


  virtual ~CTAOperation_SpreadAskConTrade_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetKeepOrders_args__isset {
  _CTAOperation_SetKeepOrders_args__isset() : atsName(false), keepOrders(false) {}
  bool atsName :1;
  bool keepOrders :1;
} _CTAOperation_SetKeepOrders_args__isset;

class CTAOperation_SetKeepOrders_args {
 public:

  CTAOperation_SetKeepOrders_args(const CTAOperation_SetKeepOrders_args&);
  CTAOperation_SetKeepOrders_args& operator=(const CTAOperation_SetKeepOrders_args&);
  CTAOperation_SetKeepOrders_args() : atsName(), keepOrders(0) {
  }

  virtual ~CTAOperation_SetKeepOrders_args() throw();
  std::string atsName;
  bool keepOrders;

  _CTAOperation_SetKeepOrders_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_keepOrders(const bool val);

  bool operator == (const CTAOperation_SetKeepOrders_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(keepOrders == rhs.keepOrders))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetKeepOrders_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetKeepOrders_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetKeepOrders_pargs {
 public:


  virtual ~CTAOperation_SetKeepOrders_pargs() throw();
  const std::string* atsName;
  const bool* keepOrders;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetKeepOrders_result__isset {
  _CTAOperation_SetKeepOrders_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetKeepOrders_result__isset;

class CTAOperation_SetKeepOrders_result {
 public:

  CTAOperation_SetKeepOrders_result(const CTAOperation_SetKeepOrders_result&);
  CTAOperation_SetKeepOrders_result& operator=(const CTAOperation_SetKeepOrders_result&);
  CTAOperation_SetKeepOrders_result() : success(0) {
  }

  virtual ~CTAOperation_SetKeepOrders_result() throw();
  bool success;

  _CTAOperation_SetKeepOrders_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetKeepOrders_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetKeepOrders_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetKeepOrders_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetKeepOrders_presult__isset {
  _CTAOperation_SetKeepOrders_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetKeepOrders_presult__isset;

class CTAOperation_SetKeepOrders_presult {
 public:


  virtual ~CTAOperation_SetKeepOrders_presult() throw();
  bool* success;

  _CTAOperation_SetKeepOrders_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetForceOpen_args__isset {
  _CTAOperation_SetForceOpen_args__isset() : atsName(false), forceOpen(false) {}
  bool atsName :1;
  bool forceOpen :1;
} _CTAOperation_SetForceOpen_args__isset;

class CTAOperation_SetForceOpen_args {
 public:

  CTAOperation_SetForceOpen_args(const CTAOperation_SetForceOpen_args&);
  CTAOperation_SetForceOpen_args& operator=(const CTAOperation_SetForceOpen_args&);
  CTAOperation_SetForceOpen_args() : atsName(), forceOpen(0) {
  }

  virtual ~CTAOperation_SetForceOpen_args() throw();
  std::string atsName;
  bool forceOpen;

  _CTAOperation_SetForceOpen_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_forceOpen(const bool val);

  bool operator == (const CTAOperation_SetForceOpen_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(forceOpen == rhs.forceOpen))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetForceOpen_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetForceOpen_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetForceOpen_pargs {
 public:


  virtual ~CTAOperation_SetForceOpen_pargs() throw();
  const std::string* atsName;
  const bool* forceOpen;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetForceOpen_result__isset {
  _CTAOperation_SetForceOpen_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetForceOpen_result__isset;

class CTAOperation_SetForceOpen_result {
 public:

  CTAOperation_SetForceOpen_result(const CTAOperation_SetForceOpen_result&);
  CTAOperation_SetForceOpen_result& operator=(const CTAOperation_SetForceOpen_result&);
  CTAOperation_SetForceOpen_result() : success(0) {
  }

  virtual ~CTAOperation_SetForceOpen_result() throw();
  bool success;

  _CTAOperation_SetForceOpen_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetForceOpen_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetForceOpen_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetForceOpen_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetForceOpen_presult__isset {
  _CTAOperation_SetForceOpen_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetForceOpen_presult__isset;

class CTAOperation_SetForceOpen_presult {
 public:


  virtual ~CTAOperation_SetForceOpen_presult() throw();
  bool* success;

  _CTAOperation_SetForceOpen_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpeedConvergeRate_args__isset {
  _CTAOperation_SetFutureSpeedConvergeRate_args__isset() : atsName(false), SpeedConvergeRate(false) {}
  bool atsName :1;
  bool SpeedConvergeRate :1;
} _CTAOperation_SetFutureSpeedConvergeRate_args__isset;

class CTAOperation_SetFutureSpeedConvergeRate_args {
 public:

  CTAOperation_SetFutureSpeedConvergeRate_args(const CTAOperation_SetFutureSpeedConvergeRate_args&);
  CTAOperation_SetFutureSpeedConvergeRate_args& operator=(const CTAOperation_SetFutureSpeedConvergeRate_args&);
  CTAOperation_SetFutureSpeedConvergeRate_args() : atsName(), SpeedConvergeRate(0) {
  }

  virtual ~CTAOperation_SetFutureSpeedConvergeRate_args() throw();
  std::string atsName;
  double SpeedConvergeRate;

  _CTAOperation_SetFutureSpeedConvergeRate_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_SpeedConvergeRate(const double val);

  bool operator == (const CTAOperation_SetFutureSpeedConvergeRate_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(SpeedConvergeRate == rhs.SpeedConvergeRate))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpeedConvergeRate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpeedConvergeRate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpeedConvergeRate_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpeedConvergeRate_pargs() throw();
  const std::string* atsName;
  const double* SpeedConvergeRate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpeedConvergeRate_result__isset {
  _CTAOperation_SetFutureSpeedConvergeRate_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpeedConvergeRate_result__isset;

class CTAOperation_SetFutureSpeedConvergeRate_result {
 public:

  CTAOperation_SetFutureSpeedConvergeRate_result(const CTAOperation_SetFutureSpeedConvergeRate_result&);
  CTAOperation_SetFutureSpeedConvergeRate_result& operator=(const CTAOperation_SetFutureSpeedConvergeRate_result&);
  CTAOperation_SetFutureSpeedConvergeRate_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpeedConvergeRate_result() throw();
  double success;

  _CTAOperation_SetFutureSpeedConvergeRate_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureSpeedConvergeRate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpeedConvergeRate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpeedConvergeRate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpeedConvergeRate_presult__isset {
  _CTAOperation_SetFutureSpeedConvergeRate_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpeedConvergeRate_presult__isset;

class CTAOperation_SetFutureSpeedConvergeRate_presult {
 public:


  virtual ~CTAOperation_SetFutureSpeedConvergeRate_presult() throw();
  double* success;

  _CTAOperation_SetFutureSpeedConvergeRate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureSpeed_args__isset {
  _CTAOperation_SetFutureSpeed_args__isset() : atsName(false), Speed(false) {}
  bool atsName :1;
  bool Speed :1;
} _CTAOperation_SetFutureSpeed_args__isset;

class CTAOperation_SetFutureSpeed_args {
 public:

  CTAOperation_SetFutureSpeed_args(const CTAOperation_SetFutureSpeed_args&);
  CTAOperation_SetFutureSpeed_args& operator=(const CTAOperation_SetFutureSpeed_args&);
  CTAOperation_SetFutureSpeed_args() : atsName(), Speed(0) {
  }

  virtual ~CTAOperation_SetFutureSpeed_args() throw();
  std::string atsName;
  double Speed;

  _CTAOperation_SetFutureSpeed_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_Speed(const double val);

  bool operator == (const CTAOperation_SetFutureSpeed_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(Speed == rhs.Speed))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpeed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpeed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureSpeed_pargs {
 public:


  virtual ~CTAOperation_SetFutureSpeed_pargs() throw();
  const std::string* atsName;
  const double* Speed;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpeed_result__isset {
  _CTAOperation_SetFutureSpeed_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpeed_result__isset;

class CTAOperation_SetFutureSpeed_result {
 public:

  CTAOperation_SetFutureSpeed_result(const CTAOperation_SetFutureSpeed_result&);
  CTAOperation_SetFutureSpeed_result& operator=(const CTAOperation_SetFutureSpeed_result&);
  CTAOperation_SetFutureSpeed_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureSpeed_result() throw();
  double success;

  _CTAOperation_SetFutureSpeed_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureSpeed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureSpeed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureSpeed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureSpeed_presult__isset {
  _CTAOperation_SetFutureSpeed_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureSpeed_presult__isset;

class CTAOperation_SetFutureSpeed_presult {
 public:


  virtual ~CTAOperation_SetFutureSpeed_presult() throw();
  double* success;

  _CTAOperation_SetFutureSpeed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetFutureLastSpread_args__isset {
  _CTAOperation_SetFutureLastSpread_args__isset() : atsName(false), LastSpread(false) {}
  bool atsName :1;
  bool LastSpread :1;
} _CTAOperation_SetFutureLastSpread_args__isset;

class CTAOperation_SetFutureLastSpread_args {
 public:

  CTAOperation_SetFutureLastSpread_args(const CTAOperation_SetFutureLastSpread_args&);
  CTAOperation_SetFutureLastSpread_args& operator=(const CTAOperation_SetFutureLastSpread_args&);
  CTAOperation_SetFutureLastSpread_args() : atsName(), LastSpread(0) {
  }

  virtual ~CTAOperation_SetFutureLastSpread_args() throw();
  std::string atsName;
  double LastSpread;

  _CTAOperation_SetFutureLastSpread_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_LastSpread(const double val);

  bool operator == (const CTAOperation_SetFutureLastSpread_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(LastSpread == rhs.LastSpread))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureLastSpread_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureLastSpread_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetFutureLastSpread_pargs {
 public:


  virtual ~CTAOperation_SetFutureLastSpread_pargs() throw();
  const std::string* atsName;
  const double* LastSpread;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureLastSpread_result__isset {
  _CTAOperation_SetFutureLastSpread_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureLastSpread_result__isset;

class CTAOperation_SetFutureLastSpread_result {
 public:

  CTAOperation_SetFutureLastSpread_result(const CTAOperation_SetFutureLastSpread_result&);
  CTAOperation_SetFutureLastSpread_result& operator=(const CTAOperation_SetFutureLastSpread_result&);
  CTAOperation_SetFutureLastSpread_result() : success(0) {
  }

  virtual ~CTAOperation_SetFutureLastSpread_result() throw();
  double success;

  _CTAOperation_SetFutureLastSpread_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetFutureLastSpread_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetFutureLastSpread_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetFutureLastSpread_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetFutureLastSpread_presult__isset {
  _CTAOperation_SetFutureLastSpread_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetFutureLastSpread_presult__isset;

class CTAOperation_SetFutureLastSpread_presult {
 public:


  virtual ~CTAOperation_SetFutureLastSpread_presult() throw();
  double* success;

  _CTAOperation_SetFutureLastSpread_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetVolatility_args__isset {
  _CTAOperation_SetVolatility_args__isset() : atsName(false), Vol(false) {}
  bool atsName :1;
  bool Vol :1;
} _CTAOperation_SetVolatility_args__isset;

class CTAOperation_SetVolatility_args {
 public:

  CTAOperation_SetVolatility_args(const CTAOperation_SetVolatility_args&);
  CTAOperation_SetVolatility_args& operator=(const CTAOperation_SetVolatility_args&);
  CTAOperation_SetVolatility_args() : atsName(), Vol(0) {
  }

  virtual ~CTAOperation_SetVolatility_args() throw();
  std::string atsName;
  double Vol;

  _CTAOperation_SetVolatility_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_Vol(const double val);

  bool operator == (const CTAOperation_SetVolatility_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(Vol == rhs.Vol))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetVolatility_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetVolatility_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetVolatility_pargs {
 public:


  virtual ~CTAOperation_SetVolatility_pargs() throw();
  const std::string* atsName;
  const double* Vol;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetVolatility_result__isset {
  _CTAOperation_SetVolatility_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetVolatility_result__isset;

class CTAOperation_SetVolatility_result {
 public:

  CTAOperation_SetVolatility_result(const CTAOperation_SetVolatility_result&);
  CTAOperation_SetVolatility_result& operator=(const CTAOperation_SetVolatility_result&);
  CTAOperation_SetVolatility_result() : success(0) {
  }

  virtual ~CTAOperation_SetVolatility_result() throw();
  double success;

  _CTAOperation_SetVolatility_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetVolatility_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetVolatility_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetVolatility_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetVolatility_presult__isset {
  _CTAOperation_SetVolatility_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetVolatility_presult__isset;

class CTAOperation_SetVolatility_presult {
 public:


  virtual ~CTAOperation_SetVolatility_presult() throw();
  double* success;

  _CTAOperation_SetVolatility_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetMaxVolRange_args__isset {
  _CTAOperation_SetMaxVolRange_args__isset() : atsName(false), MaxVolRange(false) {}
  bool atsName :1;
  bool MaxVolRange :1;
} _CTAOperation_SetMaxVolRange_args__isset;

class CTAOperation_SetMaxVolRange_args {
 public:

  CTAOperation_SetMaxVolRange_args(const CTAOperation_SetMaxVolRange_args&);
  CTAOperation_SetMaxVolRange_args& operator=(const CTAOperation_SetMaxVolRange_args&);
  CTAOperation_SetMaxVolRange_args() : atsName(), MaxVolRange(0) {
  }

  virtual ~CTAOperation_SetMaxVolRange_args() throw();
  std::string atsName;
  double MaxVolRange;

  _CTAOperation_SetMaxVolRange_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_MaxVolRange(const double val);

  bool operator == (const CTAOperation_SetMaxVolRange_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(MaxVolRange == rhs.MaxVolRange))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetMaxVolRange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetMaxVolRange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetMaxVolRange_pargs {
 public:


  virtual ~CTAOperation_SetMaxVolRange_pargs() throw();
  const std::string* atsName;
  const double* MaxVolRange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetMaxVolRange_result__isset {
  _CTAOperation_SetMaxVolRange_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetMaxVolRange_result__isset;

class CTAOperation_SetMaxVolRange_result {
 public:

  CTAOperation_SetMaxVolRange_result(const CTAOperation_SetMaxVolRange_result&);
  CTAOperation_SetMaxVolRange_result& operator=(const CTAOperation_SetMaxVolRange_result&);
  CTAOperation_SetMaxVolRange_result() : success(0) {
  }

  virtual ~CTAOperation_SetMaxVolRange_result() throw();
  double success;

  _CTAOperation_SetMaxVolRange_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetMaxVolRange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetMaxVolRange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetMaxVolRange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetMaxVolRange_presult__isset {
  _CTAOperation_SetMaxVolRange_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetMaxVolRange_presult__isset;

class CTAOperation_SetMaxVolRange_presult {
 public:


  virtual ~CTAOperation_SetMaxVolRange_presult() throw();
  double* success;

  _CTAOperation_SetMaxVolRange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetMarketMakerActive_args__isset {
  _CTAOperation_SetMarketMakerActive_args__isset() : atsName(false), code(false), active(false) {}
  bool atsName :1;
  bool code :1;
  bool active :1;
} _CTAOperation_SetMarketMakerActive_args__isset;

class CTAOperation_SetMarketMakerActive_args {
 public:

  CTAOperation_SetMarketMakerActive_args(const CTAOperation_SetMarketMakerActive_args&);
  CTAOperation_SetMarketMakerActive_args& operator=(const CTAOperation_SetMarketMakerActive_args&);
  CTAOperation_SetMarketMakerActive_args() : atsName(), code(), active(0) {
  }

  virtual ~CTAOperation_SetMarketMakerActive_args() throw();
  std::string atsName;
  std::string code;
  bool active;

  _CTAOperation_SetMarketMakerActive_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_code(const std::string& val);

  void __set_active(const bool val);

  bool operator == (const CTAOperation_SetMarketMakerActive_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(active == rhs.active))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetMarketMakerActive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetMarketMakerActive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetMarketMakerActive_pargs {
 public:


  virtual ~CTAOperation_SetMarketMakerActive_pargs() throw();
  const std::string* atsName;
  const std::string* code;
  const bool* active;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetMarketMakerActive_result__isset {
  _CTAOperation_SetMarketMakerActive_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetMarketMakerActive_result__isset;

class CTAOperation_SetMarketMakerActive_result {
 public:

  CTAOperation_SetMarketMakerActive_result(const CTAOperation_SetMarketMakerActive_result&);
  CTAOperation_SetMarketMakerActive_result& operator=(const CTAOperation_SetMarketMakerActive_result&);
  CTAOperation_SetMarketMakerActive_result() : success(0) {
  }

  virtual ~CTAOperation_SetMarketMakerActive_result() throw();
  bool success;

  _CTAOperation_SetMarketMakerActive_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetMarketMakerActive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetMarketMakerActive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetMarketMakerActive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetMarketMakerActive_presult__isset {
  _CTAOperation_SetMarketMakerActive_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetMarketMakerActive_presult__isset;

class CTAOperation_SetMarketMakerActive_presult {
 public:


  virtual ~CTAOperation_SetMarketMakerActive_presult() throw();
  bool* success;

  _CTAOperation_SetMarketMakerActive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetMarketMakerDouble_args__isset {
  _CTAOperation_SetMarketMakerDouble_args__isset() : atsName(false), code(false), param(false), value(false) {}
  bool atsName :1;
  bool code :1;
  bool param :1;
  bool value :1;
} _CTAOperation_SetMarketMakerDouble_args__isset;

class CTAOperation_SetMarketMakerDouble_args {
 public:

  CTAOperation_SetMarketMakerDouble_args(const CTAOperation_SetMarketMakerDouble_args&);
  CTAOperation_SetMarketMakerDouble_args& operator=(const CTAOperation_SetMarketMakerDouble_args&);
  CTAOperation_SetMarketMakerDouble_args() : atsName(), code(), param(), value(0) {
  }

  virtual ~CTAOperation_SetMarketMakerDouble_args() throw();
  std::string atsName;
  std::string code;
  std::string param;
  double value;

  _CTAOperation_SetMarketMakerDouble_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_code(const std::string& val);

  void __set_param(const std::string& val);

  void __set_value(const double val);

  bool operator == (const CTAOperation_SetMarketMakerDouble_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(param == rhs.param))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetMarketMakerDouble_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetMarketMakerDouble_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetMarketMakerDouble_pargs {
 public:


  virtual ~CTAOperation_SetMarketMakerDouble_pargs() throw();
  const std::string* atsName;
  const std::string* code;
  const std::string* param;
  const double* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetMarketMakerDouble_result__isset {
  _CTAOperation_SetMarketMakerDouble_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetMarketMakerDouble_result__isset;

class CTAOperation_SetMarketMakerDouble_result {
 public:

  CTAOperation_SetMarketMakerDouble_result(const CTAOperation_SetMarketMakerDouble_result&);
  CTAOperation_SetMarketMakerDouble_result& operator=(const CTAOperation_SetMarketMakerDouble_result&);
  CTAOperation_SetMarketMakerDouble_result() : success(0) {
  }

  virtual ~CTAOperation_SetMarketMakerDouble_result() throw();
  double success;

  _CTAOperation_SetMarketMakerDouble_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetMarketMakerDouble_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetMarketMakerDouble_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetMarketMakerDouble_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetMarketMakerDouble_presult__isset {
  _CTAOperation_SetMarketMakerDouble_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetMarketMakerDouble_presult__isset;

class CTAOperation_SetMarketMakerDouble_presult {
 public:


  virtual ~CTAOperation_SetMarketMakerDouble_presult() throw();
  double* success;

  _CTAOperation_SetMarketMakerDouble_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetMarketMakerInt_args__isset {
  _CTAOperation_SetMarketMakerInt_args__isset() : atsName(false), code(false), param(false), value(false) {}
  bool atsName :1;
  bool code :1;
  bool param :1;
  bool value :1;
} _CTAOperation_SetMarketMakerInt_args__isset;

class CTAOperation_SetMarketMakerInt_args {
 public:

  CTAOperation_SetMarketMakerInt_args(const CTAOperation_SetMarketMakerInt_args&);
  CTAOperation_SetMarketMakerInt_args& operator=(const CTAOperation_SetMarketMakerInt_args&);
  CTAOperation_SetMarketMakerInt_args() : atsName(), code(), param(), value(0) {
  }

  virtual ~CTAOperation_SetMarketMakerInt_args() throw();
  std::string atsName;
  std::string code;
  std::string param;
  int32_t value;

  _CTAOperation_SetMarketMakerInt_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_code(const std::string& val);

  void __set_param(const std::string& val);

  void __set_value(const int32_t val);

  bool operator == (const CTAOperation_SetMarketMakerInt_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(param == rhs.param))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetMarketMakerInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetMarketMakerInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetMarketMakerInt_pargs {
 public:


  virtual ~CTAOperation_SetMarketMakerInt_pargs() throw();
  const std::string* atsName;
  const std::string* code;
  const std::string* param;
  const int32_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetMarketMakerInt_result__isset {
  _CTAOperation_SetMarketMakerInt_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetMarketMakerInt_result__isset;

class CTAOperation_SetMarketMakerInt_result {
 public:

  CTAOperation_SetMarketMakerInt_result(const CTAOperation_SetMarketMakerInt_result&);
  CTAOperation_SetMarketMakerInt_result& operator=(const CTAOperation_SetMarketMakerInt_result&);
  CTAOperation_SetMarketMakerInt_result() : success(0) {
  }

  virtual ~CTAOperation_SetMarketMakerInt_result() throw();
  int32_t success;

  _CTAOperation_SetMarketMakerInt_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CTAOperation_SetMarketMakerInt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetMarketMakerInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetMarketMakerInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetMarketMakerInt_presult__isset {
  _CTAOperation_SetMarketMakerInt_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetMarketMakerInt_presult__isset;

class CTAOperation_SetMarketMakerInt_presult {
 public:


  virtual ~CTAOperation_SetMarketMakerInt_presult() throw();
  int32_t* success;

  _CTAOperation_SetMarketMakerInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetDoFutureMarketMaker_args__isset {
  _CTAOperation_SetDoFutureMarketMaker_args__isset() : atsName(false), value(false) {}
  bool atsName :1;
  bool value :1;
} _CTAOperation_SetDoFutureMarketMaker_args__isset;

class CTAOperation_SetDoFutureMarketMaker_args {
 public:

  CTAOperation_SetDoFutureMarketMaker_args(const CTAOperation_SetDoFutureMarketMaker_args&);
  CTAOperation_SetDoFutureMarketMaker_args& operator=(const CTAOperation_SetDoFutureMarketMaker_args&);
  CTAOperation_SetDoFutureMarketMaker_args() : atsName(), value(0) {
  }

  virtual ~CTAOperation_SetDoFutureMarketMaker_args() throw();
  std::string atsName;
  bool value;

  _CTAOperation_SetDoFutureMarketMaker_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_value(const bool val);

  bool operator == (const CTAOperation_SetDoFutureMarketMaker_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetDoFutureMarketMaker_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetDoFutureMarketMaker_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetDoFutureMarketMaker_pargs {
 public:


  virtual ~CTAOperation_SetDoFutureMarketMaker_pargs() throw();
  const std::string* atsName;
  const bool* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetDoFutureMarketMaker_result__isset {
  _CTAOperation_SetDoFutureMarketMaker_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetDoFutureMarketMaker_result__isset;

class CTAOperation_SetDoFutureMarketMaker_result {
 public:

  CTAOperation_SetDoFutureMarketMaker_result(const CTAOperation_SetDoFutureMarketMaker_result&);
  CTAOperation_SetDoFutureMarketMaker_result& operator=(const CTAOperation_SetDoFutureMarketMaker_result&);
  CTAOperation_SetDoFutureMarketMaker_result() : success(0) {
  }

  virtual ~CTAOperation_SetDoFutureMarketMaker_result() throw();
  bool success;

  _CTAOperation_SetDoFutureMarketMaker_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetDoFutureMarketMaker_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetDoFutureMarketMaker_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetDoFutureMarketMaker_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetDoFutureMarketMaker_presult__isset {
  _CTAOperation_SetDoFutureMarketMaker_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetDoFutureMarketMaker_presult__isset;

class CTAOperation_SetDoFutureMarketMaker_presult {
 public:


  virtual ~CTAOperation_SetDoFutureMarketMaker_presult() throw();
  bool* success;

  _CTAOperation_SetDoFutureMarketMaker_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetMarketMakerCanReduce_args__isset {
  _CTAOperation_SetMarketMakerCanReduce_args__isset() : atsName(false), value(false) {}
  bool atsName :1;
  bool value :1;
} _CTAOperation_SetMarketMakerCanReduce_args__isset;

class CTAOperation_SetMarketMakerCanReduce_args {
 public:

  CTAOperation_SetMarketMakerCanReduce_args(const CTAOperation_SetMarketMakerCanReduce_args&);
  CTAOperation_SetMarketMakerCanReduce_args& operator=(const CTAOperation_SetMarketMakerCanReduce_args&);
  CTAOperation_SetMarketMakerCanReduce_args() : atsName(), value(0) {
  }

  virtual ~CTAOperation_SetMarketMakerCanReduce_args() throw();
  std::string atsName;
  bool value;

  _CTAOperation_SetMarketMakerCanReduce_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_value(const bool val);

  bool operator == (const CTAOperation_SetMarketMakerCanReduce_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetMarketMakerCanReduce_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetMarketMakerCanReduce_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetMarketMakerCanReduce_pargs {
 public:


  virtual ~CTAOperation_SetMarketMakerCanReduce_pargs() throw();
  const std::string* atsName;
  const bool* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetMarketMakerCanReduce_result__isset {
  _CTAOperation_SetMarketMakerCanReduce_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetMarketMakerCanReduce_result__isset;

class CTAOperation_SetMarketMakerCanReduce_result {
 public:

  CTAOperation_SetMarketMakerCanReduce_result(const CTAOperation_SetMarketMakerCanReduce_result&);
  CTAOperation_SetMarketMakerCanReduce_result& operator=(const CTAOperation_SetMarketMakerCanReduce_result&);
  CTAOperation_SetMarketMakerCanReduce_result() : success(0) {
  }

  virtual ~CTAOperation_SetMarketMakerCanReduce_result() throw();
  bool success;

  _CTAOperation_SetMarketMakerCanReduce_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetMarketMakerCanReduce_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetMarketMakerCanReduce_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetMarketMakerCanReduce_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetMarketMakerCanReduce_presult__isset {
  _CTAOperation_SetMarketMakerCanReduce_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetMarketMakerCanReduce_presult__isset;

class CTAOperation_SetMarketMakerCanReduce_presult {
 public:


  virtual ~CTAOperation_SetMarketMakerCanReduce_presult() throw();
  bool* success;

  _CTAOperation_SetMarketMakerCanReduce_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_ForceContribe_args__isset {
  _CTAOperation_ForceContribe_args__isset() : atsName(false) {}
  bool atsName :1;
} _CTAOperation_ForceContribe_args__isset;

class CTAOperation_ForceContribe_args {
 public:

  CTAOperation_ForceContribe_args(const CTAOperation_ForceContribe_args&);
  CTAOperation_ForceContribe_args& operator=(const CTAOperation_ForceContribe_args&);
  CTAOperation_ForceContribe_args() : atsName() {
  }

  virtual ~CTAOperation_ForceContribe_args() throw();
  std::string atsName;

  _CTAOperation_ForceContribe_args__isset __isset;

  void __set_atsName(const std::string& val);

  bool operator == (const CTAOperation_ForceContribe_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_ForceContribe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_ForceContribe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_ForceContribe_pargs {
 public:


  virtual ~CTAOperation_ForceContribe_pargs() throw();
  const std::string* atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_ForceContribe_result {
 public:

  CTAOperation_ForceContribe_result(const CTAOperation_ForceContribe_result&);
  CTAOperation_ForceContribe_result& operator=(const CTAOperation_ForceContribe_result&);
  CTAOperation_ForceContribe_result() {
  }

  virtual ~CTAOperation_ForceContribe_result() throw();

  bool operator == (const CTAOperation_ForceContribe_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CTAOperation_ForceContribe_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_ForceContribe_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_ForceContribe_presult {
 public:


  virtual ~CTAOperation_ForceContribe_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_ResetMovingAvg_args__isset {
  _CTAOperation_ResetMovingAvg_args__isset() : atsName(false) {}
  bool atsName :1;
} _CTAOperation_ResetMovingAvg_args__isset;

class CTAOperation_ResetMovingAvg_args {
 public:

  CTAOperation_ResetMovingAvg_args(const CTAOperation_ResetMovingAvg_args&);
  CTAOperation_ResetMovingAvg_args& operator=(const CTAOperation_ResetMovingAvg_args&);
  CTAOperation_ResetMovingAvg_args() : atsName() {
  }

  virtual ~CTAOperation_ResetMovingAvg_args() throw();
  std::string atsName;

  _CTAOperation_ResetMovingAvg_args__isset __isset;

  void __set_atsName(const std::string& val);

  bool operator == (const CTAOperation_ResetMovingAvg_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_ResetMovingAvg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_ResetMovingAvg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_ResetMovingAvg_pargs {
 public:


  virtual ~CTAOperation_ResetMovingAvg_pargs() throw();
  const std::string* atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_ResetMovingAvg_result {
 public:

  CTAOperation_ResetMovingAvg_result(const CTAOperation_ResetMovingAvg_result&);
  CTAOperation_ResetMovingAvg_result& operator=(const CTAOperation_ResetMovingAvg_result&);
  CTAOperation_ResetMovingAvg_result() {
  }

  virtual ~CTAOperation_ResetMovingAvg_result() throw();

  bool operator == (const CTAOperation_ResetMovingAvg_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CTAOperation_ResetMovingAvg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_ResetMovingAvg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_ResetMovingAvg_presult {
 public:


  virtual ~CTAOperation_ResetMovingAvg_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetTwapData_args__isset {
  _CTAOperation_SetTwapData_args__isset() : atsName(false), data(false) {}
  bool atsName :1;
  bool data :1;
} _CTAOperation_SetTwapData_args__isset;

class CTAOperation_SetTwapData_args {
 public:

  CTAOperation_SetTwapData_args(const CTAOperation_SetTwapData_args&);
  CTAOperation_SetTwapData_args& operator=(const CTAOperation_SetTwapData_args&);
  CTAOperation_SetTwapData_args() : atsName() {
  }

  virtual ~CTAOperation_SetTwapData_args() throw();
  std::string atsName;
  TWAPDataMsg data;

  _CTAOperation_SetTwapData_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_data(const TWAPDataMsg& val);

  bool operator == (const CTAOperation_SetTwapData_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetTwapData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetTwapData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetTwapData_pargs {
 public:


  virtual ~CTAOperation_SetTwapData_pargs() throw();
  const std::string* atsName;
  const TWAPDataMsg* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetTwapData_result__isset {
  _CTAOperation_SetTwapData_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetTwapData_result__isset;

class CTAOperation_SetTwapData_result {
 public:

  CTAOperation_SetTwapData_result(const CTAOperation_SetTwapData_result&);
  CTAOperation_SetTwapData_result& operator=(const CTAOperation_SetTwapData_result&);
  CTAOperation_SetTwapData_result() : success(0) {
  }

  virtual ~CTAOperation_SetTwapData_result() throw();
  bool success;

  _CTAOperation_SetTwapData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetTwapData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetTwapData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetTwapData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetTwapData_presult__isset {
  _CTAOperation_SetTwapData_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetTwapData_presult__isset;

class CTAOperation_SetTwapData_presult {
 public:


  virtual ~CTAOperation_SetTwapData_presult() throw();
  bool* success;

  _CTAOperation_SetTwapData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetTurtleAlgoData_args__isset {
  _CTAOperation_SetTurtleAlgoData_args__isset() : atsName(false), data(false) {}
  bool atsName :1;
  bool data :1;
} _CTAOperation_SetTurtleAlgoData_args__isset;

class CTAOperation_SetTurtleAlgoData_args {
 public:

  CTAOperation_SetTurtleAlgoData_args(const CTAOperation_SetTurtleAlgoData_args&);
  CTAOperation_SetTurtleAlgoData_args& operator=(const CTAOperation_SetTurtleAlgoData_args&);
  CTAOperation_SetTurtleAlgoData_args() : atsName() {
  }

  virtual ~CTAOperation_SetTurtleAlgoData_args() throw();
  std::string atsName;
  TurtleAlgoMsg data;

  _CTAOperation_SetTurtleAlgoData_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_data(const TurtleAlgoMsg& val);

  bool operator == (const CTAOperation_SetTurtleAlgoData_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetTurtleAlgoData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetTurtleAlgoData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetTurtleAlgoData_pargs {
 public:


  virtual ~CTAOperation_SetTurtleAlgoData_pargs() throw();
  const std::string* atsName;
  const TurtleAlgoMsg* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetTurtleAlgoData_result__isset {
  _CTAOperation_SetTurtleAlgoData_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetTurtleAlgoData_result__isset;

class CTAOperation_SetTurtleAlgoData_result {
 public:

  CTAOperation_SetTurtleAlgoData_result(const CTAOperation_SetTurtleAlgoData_result&);
  CTAOperation_SetTurtleAlgoData_result& operator=(const CTAOperation_SetTurtleAlgoData_result&);
  CTAOperation_SetTurtleAlgoData_result() : success(0) {
  }

  virtual ~CTAOperation_SetTurtleAlgoData_result() throw();
  bool success;

  _CTAOperation_SetTurtleAlgoData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetTurtleAlgoData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetTurtleAlgoData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetTurtleAlgoData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetTurtleAlgoData_presult__isset {
  _CTAOperation_SetTurtleAlgoData_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetTurtleAlgoData_presult__isset;

class CTAOperation_SetTurtleAlgoData_presult {
 public:


  virtual ~CTAOperation_SetTurtleAlgoData_presult() throw();
  bool* success;

  _CTAOperation_SetTurtleAlgoData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetKlineConfig_args__isset {
  _CTAOperation_SetKlineConfig_args__isset() : atsName(false), data(false) {}
  bool atsName :1;
  bool data :1;
} _CTAOperation_SetKlineConfig_args__isset;

class CTAOperation_SetKlineConfig_args {
 public:

  CTAOperation_SetKlineConfig_args(const CTAOperation_SetKlineConfig_args&);
  CTAOperation_SetKlineConfig_args& operator=(const CTAOperation_SetKlineConfig_args&);
  CTAOperation_SetKlineConfig_args() : atsName() {
  }

  virtual ~CTAOperation_SetKlineConfig_args() throw();
  std::string atsName;
  KlineConfigMsg data;

  _CTAOperation_SetKlineConfig_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_data(const KlineConfigMsg& val);

  bool operator == (const CTAOperation_SetKlineConfig_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetKlineConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetKlineConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetKlineConfig_pargs {
 public:


  virtual ~CTAOperation_SetKlineConfig_pargs() throw();
  const std::string* atsName;
  const KlineConfigMsg* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetKlineConfig_result__isset {
  _CTAOperation_SetKlineConfig_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetKlineConfig_result__isset;

class CTAOperation_SetKlineConfig_result {
 public:

  CTAOperation_SetKlineConfig_result(const CTAOperation_SetKlineConfig_result&);
  CTAOperation_SetKlineConfig_result& operator=(const CTAOperation_SetKlineConfig_result&);
  CTAOperation_SetKlineConfig_result() : success(0) {
  }

  virtual ~CTAOperation_SetKlineConfig_result() throw();
  bool success;

  _CTAOperation_SetKlineConfig_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CTAOperation_SetKlineConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetKlineConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetKlineConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetKlineConfig_presult__isset {
  _CTAOperation_SetKlineConfig_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetKlineConfig_presult__isset;

class CTAOperation_SetKlineConfig_presult {
 public:


  virtual ~CTAOperation_SetKlineConfig_presult() throw();
  bool* success;

  _CTAOperation_SetKlineConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetTurtleFuture_args__isset {
  _CTAOperation_SetTurtleFuture_args__isset() : atsName(false), code(false) {}
  bool atsName :1;
  bool code :1;
} _CTAOperation_SetTurtleFuture_args__isset;

class CTAOperation_SetTurtleFuture_args {
 public:

  CTAOperation_SetTurtleFuture_args(const CTAOperation_SetTurtleFuture_args&);
  CTAOperation_SetTurtleFuture_args& operator=(const CTAOperation_SetTurtleFuture_args&);
  CTAOperation_SetTurtleFuture_args() : atsName(), code() {
  }

  virtual ~CTAOperation_SetTurtleFuture_args() throw();
  std::string atsName;
  std::string code;

  _CTAOperation_SetTurtleFuture_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_code(const std::string& val);

  bool operator == (const CTAOperation_SetTurtleFuture_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetTurtleFuture_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetTurtleFuture_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetTurtleFuture_pargs {
 public:


  virtual ~CTAOperation_SetTurtleFuture_pargs() throw();
  const std::string* atsName;
  const std::string* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetTurtleFuture_result__isset {
  _CTAOperation_SetTurtleFuture_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetTurtleFuture_result__isset;

class CTAOperation_SetTurtleFuture_result {
 public:

  CTAOperation_SetTurtleFuture_result(const CTAOperation_SetTurtleFuture_result&);
  CTAOperation_SetTurtleFuture_result& operator=(const CTAOperation_SetTurtleFuture_result&);
  CTAOperation_SetTurtleFuture_result() : success() {
  }

  virtual ~CTAOperation_SetTurtleFuture_result() throw();
  std::string success;

  _CTAOperation_SetTurtleFuture_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const CTAOperation_SetTurtleFuture_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetTurtleFuture_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetTurtleFuture_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetTurtleFuture_presult__isset {
  _CTAOperation_SetTurtleFuture_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetTurtleFuture_presult__isset;

class CTAOperation_SetTurtleFuture_presult {
 public:


  virtual ~CTAOperation_SetTurtleFuture_presult() throw();
  std::string* success;

  _CTAOperation_SetTurtleFuture_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CTAOperation_SetRiskDegree_args__isset {
  _CTAOperation_SetRiskDegree_args__isset() : atsName(false), RiskDegree(false) {}
  bool atsName :1;
  bool RiskDegree :1;
} _CTAOperation_SetRiskDegree_args__isset;

class CTAOperation_SetRiskDegree_args {
 public:

  CTAOperation_SetRiskDegree_args(const CTAOperation_SetRiskDegree_args&);
  CTAOperation_SetRiskDegree_args& operator=(const CTAOperation_SetRiskDegree_args&);
  CTAOperation_SetRiskDegree_args() : atsName(), RiskDegree(0) {
  }

  virtual ~CTAOperation_SetRiskDegree_args() throw();
  std::string atsName;
  double RiskDegree;

  _CTAOperation_SetRiskDegree_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_RiskDegree(const double val);

  bool operator == (const CTAOperation_SetRiskDegree_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(RiskDegree == rhs.RiskDegree))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetRiskDegree_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetRiskDegree_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_SetRiskDegree_pargs {
 public:


  virtual ~CTAOperation_SetRiskDegree_pargs() throw();
  const std::string* atsName;
  const double* RiskDegree;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetRiskDegree_result__isset {
  _CTAOperation_SetRiskDegree_result__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetRiskDegree_result__isset;

class CTAOperation_SetRiskDegree_result {
 public:

  CTAOperation_SetRiskDegree_result(const CTAOperation_SetRiskDegree_result&);
  CTAOperation_SetRiskDegree_result& operator=(const CTAOperation_SetRiskDegree_result&);
  CTAOperation_SetRiskDegree_result() : success(0) {
  }

  virtual ~CTAOperation_SetRiskDegree_result() throw();
  double success;

  _CTAOperation_SetRiskDegree_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CTAOperation_SetRiskDegree_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CTAOperation_SetRiskDegree_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_SetRiskDegree_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CTAOperation_SetRiskDegree_presult__isset {
  _CTAOperation_SetRiskDegree_presult__isset() : success(false) {}
  bool success :1;
} _CTAOperation_SetRiskDegree_presult__isset;

class CTAOperation_SetRiskDegree_presult {
 public:


  virtual ~CTAOperation_SetRiskDegree_presult() throw();
  double* success;

  _CTAOperation_SetRiskDegree_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CTAOperation_MatchOrders_args {
 public:

  CTAOperation_MatchOrders_args(const CTAOperation_MatchOrders_args&);
  CTAOperation_MatchOrders_args& operator=(const CTAOperation_MatchOrders_args&);
  CTAOperation_MatchOrders_args() {
  }

  virtual ~CTAOperation_MatchOrders_args() throw();

  bool operator == (const CTAOperation_MatchOrders_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CTAOperation_MatchOrders_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_MatchOrders_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_MatchOrders_pargs {
 public:


  virtual ~CTAOperation_MatchOrders_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_MatchOrders_result {
 public:

  CTAOperation_MatchOrders_result(const CTAOperation_MatchOrders_result&);
  CTAOperation_MatchOrders_result& operator=(const CTAOperation_MatchOrders_result&);
  CTAOperation_MatchOrders_result() {
  }

  virtual ~CTAOperation_MatchOrders_result() throw();

  bool operator == (const CTAOperation_MatchOrders_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CTAOperation_MatchOrders_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTAOperation_MatchOrders_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CTAOperation_MatchOrders_presult {
 public:


  virtual ~CTAOperation_MatchOrders_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CTAOperationClient : virtual public CTAOperationIf, public  ::AtsGeneral::AtsOperationClient {
 public:
  CTAOperationClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::AtsGeneral::AtsOperationClient(prot, prot) {}
  CTAOperationClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::AtsGeneral::AtsOperationClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool SetFutureSpreadHitStatus(const std::string& atsName, const bool status);
  void send_SetFutureSpreadHitStatus(const std::string& atsName, const bool status);
  bool recv_SetFutureSpreadHitStatus();
  bool SetFutureSpreadConStatus(const std::string& atsName, const bool status);
  void send_SetFutureSpreadConStatus(const std::string& atsName, const bool status);
  bool recv_SetFutureSpreadConStatus();
  bool SetFutureSpreadConBuy(const std::string& atsName, const bool status);
  void send_SetFutureSpreadConBuy(const std::string& atsName, const bool status);
  bool recv_SetFutureSpreadConBuy();
  bool SetFutureSpreadConSell(const std::string& atsName, const bool status);
  void send_SetFutureSpreadConSell(const std::string& atsName, const bool status);
  bool recv_SetFutureSpreadConSell();
  double SetFutureSpreadFairSpread(const std::string& atsName, const double fairspread);
  void send_SetFutureSpreadFairSpread(const std::string& atsName, const double fairspread);
  double recv_SetFutureSpreadFairSpread();
  double SetFutureSpreadPosShift(const std::string& atsName, const double posShift);
  void send_SetFutureSpreadPosShift(const std::string& atsName, const double posShift);
  double recv_SetFutureSpreadPosShift();
  double SetFutureSpreadMinGainCon(const std::string& atsName, const double minGainCon);
  void send_SetFutureSpreadMinGainCon(const std::string& atsName, const double minGainCon);
  double recv_SetFutureSpreadMinGainCon();
  double SetFutureSpreadMinGainHit(const std::string& atsName, const double minGainHit);
  void send_SetFutureSpreadMinGainHit(const std::string& atsName, const double minGainHit);
  double recv_SetFutureSpreadMinGainHit();
  int32_t SetFutureSpreadMinInterval(const std::string& atsName, const int32_t MinInterval);
  void send_SetFutureSpreadMinInterval(const std::string& atsName, const int32_t MinInterval);
  int32_t recv_SetFutureSpreadMinInterval();
  int32_t SetFutureSpreadMaxWaitInterval(const std::string& atsName, const int32_t MaxWaitInterval);
  void send_SetFutureSpreadMaxWaitInterval(const std::string& atsName, const int32_t MaxWaitInterval);
  int32_t recv_SetFutureSpreadMaxWaitInterval();
  int32_t SetFutureSpreadHitSize(const std::string& atsName, const int32_t HitSize);
  void send_SetFutureSpreadHitSize(const std::string& atsName, const int32_t HitSize);
  int32_t recv_SetFutureSpreadHitSize();
  int32_t SetFutureSpreadConSize(const std::string& atsName, const int32_t ConSize);
  void send_SetFutureSpreadConSize(const std::string& atsName, const int32_t ConSize);
  int32_t recv_SetFutureSpreadConSize();
  double SetFutureSpreadConMinDiff(const std::string& atsName, const double ConMinDiff);
  void send_SetFutureSpreadConMinDiff(const std::string& atsName, const double ConMinDiff);
  double recv_SetFutureSpreadConMinDiff();
  double SetFutureSpreadMinGainConExit(const std::string& atsName, const double MinGainConExit);
  void send_SetFutureSpreadMinGainConExit(const std::string& atsName, const double MinGainConExit);
  double recv_SetFutureSpreadMinGainConExit();
  double SetFutureSpreadConMaxDistance(const std::string& atsName, const double ConMaxDistance);
  void send_SetFutureSpreadConMaxDistance(const std::string& atsName, const double ConMaxDistance);
  double recv_SetFutureSpreadConMaxDistance();
  int32_t SetFutureSpreadFuture1Pos(const std::string& atsName, const int32_t Future1Pos);
  void send_SetFutureSpreadFuture1Pos(const std::string& atsName, const int32_t Future1Pos);
  int32_t recv_SetFutureSpreadFuture1Pos();
  int32_t SetFutureSpreadFuture2Pos(const std::string& atsName, const int32_t Future2Pos);
  void send_SetFutureSpreadFuture2Pos(const std::string& atsName, const int32_t Future2Pos);
  int32_t recv_SetFutureSpreadFuture2Pos();
  int32_t SetFutureSpreadMaxNumOrders(const std::string& atsName, const int32_t MaxNumOrders);
  void send_SetFutureSpreadMaxNumOrders(const std::string& atsName, const int32_t MaxNumOrders);
  int32_t recv_SetFutureSpreadMaxNumOrders();
  int32_t SetFutureSpreadMaxPos(const std::string& atsName, const int32_t MaxPos);
  void send_SetFutureSpreadMaxPos(const std::string& atsName, const int32_t MaxPos);
  int32_t recv_SetFutureSpreadMaxPos();
  bool SetFutureSpreadUseMarketOrder(const std::string& atsName, const bool useMarketORder);
  void send_SetFutureSpreadUseMarketOrder(const std::string& atsName, const bool useMarketORder);
  bool recv_SetFutureSpreadUseMarketOrder();
  double SetFutureSpreadPosConvex(const std::string& atsName, const double posConvex);
  void send_SetFutureSpreadPosConvex(const std::string& atsName, const double posConvex);
  double recv_SetFutureSpreadPosConvex();
  bool SetFutureSpreadIgnoreUpDnLimit(const std::string& atsName, const bool IgnoreUpDnLimit);
  void send_SetFutureSpreadIgnoreUpDnLimit(const std::string& atsName, const bool IgnoreUpDnLimit);
  bool recv_SetFutureSpreadIgnoreUpDnLimit();
  double SetFutureSpreadConvergeRate(const std::string& atsName, const double ConvergeRate);
  void send_SetFutureSpreadConvergeRate(const std::string& atsName, const double ConvergeRate);
  double recv_SetFutureSpreadConvergeRate();
  double SetFutureSpreadFastConvergeRate(const std::string& atsName, const double FastConvergeRate);
  void send_SetFutureSpreadFastConvergeRate(const std::string& atsName, const double FastConvergeRate);
  double recv_SetFutureSpreadFastConvergeRate();
  double SetFutureSpreadRatio(const std::string& atsName, const double Ratio);
  void send_SetFutureSpreadRatio(const std::string& atsName, const double Ratio);
  double recv_SetFutureSpreadRatio();
  void SetAtsFutureSpreadFut1(std::string& _return, const std::string& atsName, const std::string& code);
  void send_SetAtsFutureSpreadFut1(const std::string& atsName, const std::string& code);
  void recv_SetAtsFutureSpreadFut1(std::string& _return);
  void SetAtsFutureSpreadFut2(std::string& _return, const std::string& atsName, const std::string& code);
  void send_SetAtsFutureSpreadFut2(const std::string& atsName, const std::string& code);
  void recv_SetAtsFutureSpreadFut2(std::string& _return);
  void SetAtsFutureSpreadLastKLineTime(std::string& _return, const std::string& atsName, const std::string& KLineTime);
  void send_SetAtsFutureSpreadLastKLineTime(const std::string& atsName, const std::string& KLineTime);
  void recv_SetAtsFutureSpreadLastKLineTime(std::string& _return);
  void SetAtsFutureSpreadKInterval(std::string& _return, const std::string& atsName, const std::string& KInterval);
  void send_SetAtsFutureSpreadKInterval(const std::string& atsName, const std::string& KInterval);
  void recv_SetAtsFutureSpreadKInterval(std::string& _return);
  void CreateAutomaton(CTAAtsMsg& _return, const std::string& automatonName, const std::string& underlyingName, const std::string& subscrib_list, const std::string& feedsourcesStr, const std::string& connectionsStr);
  void send_CreateAutomaton(const std::string& automatonName, const std::string& underlyingName, const std::string& subscrib_list, const std::string& feedsourcesStr, const std::string& connectionsStr);
  void recv_CreateAutomaton(CTAAtsMsg& _return);
  void SpreadBidHitTrade(const std::string& atsName);
  void send_SpreadBidHitTrade(const std::string& atsName);
  void recv_SpreadBidHitTrade();
  void SpreadAskHitTrade(const std::string& atsName);
  void send_SpreadAskHitTrade(const std::string& atsName);
  void recv_SpreadAskHitTrade();
  void SpreadBidConTrade(const std::string& atsName);
  void send_SpreadBidConTrade(const std::string& atsName);
  void recv_SpreadBidConTrade();
  void SpreadAskConTrade(const std::string& atsName);
  void send_SpreadAskConTrade(const std::string& atsName);
  void recv_SpreadAskConTrade();
  bool SetKeepOrders(const std::string& atsName, const bool keepOrders);
  void send_SetKeepOrders(const std::string& atsName, const bool keepOrders);
  bool recv_SetKeepOrders();
  bool SetForceOpen(const std::string& atsName, const bool forceOpen);
  void send_SetForceOpen(const std::string& atsName, const bool forceOpen);
  bool recv_SetForceOpen();
  double SetFutureSpeedConvergeRate(const std::string& atsName, const double SpeedConvergeRate);
  void send_SetFutureSpeedConvergeRate(const std::string& atsName, const double SpeedConvergeRate);
  double recv_SetFutureSpeedConvergeRate();
  double SetFutureSpeed(const std::string& atsName, const double Speed);
  void send_SetFutureSpeed(const std::string& atsName, const double Speed);
  double recv_SetFutureSpeed();
  double SetFutureLastSpread(const std::string& atsName, const double LastSpread);
  void send_SetFutureLastSpread(const std::string& atsName, const double LastSpread);
  double recv_SetFutureLastSpread();
  double SetVolatility(const std::string& atsName, const double Vol);
  void send_SetVolatility(const std::string& atsName, const double Vol);
  double recv_SetVolatility();
  double SetMaxVolRange(const std::string& atsName, const double MaxVolRange);
  void send_SetMaxVolRange(const std::string& atsName, const double MaxVolRange);
  double recv_SetMaxVolRange();
  bool SetMarketMakerActive(const std::string& atsName, const std::string& code, const bool active);
  void send_SetMarketMakerActive(const std::string& atsName, const std::string& code, const bool active);
  bool recv_SetMarketMakerActive();
  double SetMarketMakerDouble(const std::string& atsName, const std::string& code, const std::string& param, const double value);
  void send_SetMarketMakerDouble(const std::string& atsName, const std::string& code, const std::string& param, const double value);
  double recv_SetMarketMakerDouble();
  int32_t SetMarketMakerInt(const std::string& atsName, const std::string& code, const std::string& param, const int32_t value);
  void send_SetMarketMakerInt(const std::string& atsName, const std::string& code, const std::string& param, const int32_t value);
  int32_t recv_SetMarketMakerInt();
  bool SetDoFutureMarketMaker(const std::string& atsName, const bool value);
  void send_SetDoFutureMarketMaker(const std::string& atsName, const bool value);
  bool recv_SetDoFutureMarketMaker();
  bool SetMarketMakerCanReduce(const std::string& atsName, const bool value);
  void send_SetMarketMakerCanReduce(const std::string& atsName, const bool value);
  bool recv_SetMarketMakerCanReduce();
  void ForceContribe(const std::string& atsName);
  void send_ForceContribe(const std::string& atsName);
  void recv_ForceContribe();
  void ResetMovingAvg(const std::string& atsName);
  void send_ResetMovingAvg(const std::string& atsName);
  void recv_ResetMovingAvg();
  bool SetTwapData(const std::string& atsName, const TWAPDataMsg& data);
  void send_SetTwapData(const std::string& atsName, const TWAPDataMsg& data);
  bool recv_SetTwapData();
  bool SetTurtleAlgoData(const std::string& atsName, const TurtleAlgoMsg& data);
  void send_SetTurtleAlgoData(const std::string& atsName, const TurtleAlgoMsg& data);
  bool recv_SetTurtleAlgoData();
  bool SetKlineConfig(const std::string& atsName, const KlineConfigMsg& data);
  void send_SetKlineConfig(const std::string& atsName, const KlineConfigMsg& data);
  bool recv_SetKlineConfig();
  void SetTurtleFuture(std::string& _return, const std::string& atsName, const std::string& code);
  void send_SetTurtleFuture(const std::string& atsName, const std::string& code);
  void recv_SetTurtleFuture(std::string& _return);
  double SetRiskDegree(const std::string& atsName, const double RiskDegree);
  void send_SetRiskDegree(const std::string& atsName, const double RiskDegree);
  double recv_SetRiskDegree();
  void MatchOrders();
  void send_MatchOrders();
  void recv_MatchOrders();
};

class CTAOperationProcessor : public  ::AtsGeneral::AtsOperationProcessor {
 protected:
  boost::shared_ptr<CTAOperationIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CTAOperationProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SetFutureSpreadHitStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadConStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadConBuy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadConSell(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadFairSpread(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadPosShift(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadMinGainCon(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadMinGainHit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadMinInterval(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadMaxWaitInterval(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadHitSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadConSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadConMinDiff(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadMinGainConExit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadConMaxDistance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadFuture1Pos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadFuture2Pos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadMaxNumOrders(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadMaxPos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadUseMarketOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadPosConvex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadIgnoreUpDnLimit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadConvergeRate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadFastConvergeRate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpreadRatio(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetAtsFutureSpreadFut1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetAtsFutureSpreadFut2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetAtsFutureSpreadLastKLineTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetAtsFutureSpreadKInterval(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateAutomaton(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SpreadBidHitTrade(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SpreadAskHitTrade(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SpreadBidConTrade(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SpreadAskConTrade(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetKeepOrders(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetForceOpen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpeedConvergeRate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureSpeed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFutureLastSpread(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetVolatility(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetMaxVolRange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetMarketMakerActive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetMarketMakerDouble(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetMarketMakerInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetDoFutureMarketMaker(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetMarketMakerCanReduce(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ForceContribe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResetMovingAvg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetTwapData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetTurtleAlgoData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetKlineConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetTurtleFuture(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetRiskDegree(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchOrders(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CTAOperationProcessor(boost::shared_ptr<CTAOperationIf> iface) :
     ::AtsGeneral::AtsOperationProcessor(iface),
    iface_(iface) {
    processMap_["SetFutureSpreadHitStatus"] = &CTAOperationProcessor::process_SetFutureSpreadHitStatus;
    processMap_["SetFutureSpreadConStatus"] = &CTAOperationProcessor::process_SetFutureSpreadConStatus;
    processMap_["SetFutureSpreadConBuy"] = &CTAOperationProcessor::process_SetFutureSpreadConBuy;
    processMap_["SetFutureSpreadConSell"] = &CTAOperationProcessor::process_SetFutureSpreadConSell;
    processMap_["SetFutureSpreadFairSpread"] = &CTAOperationProcessor::process_SetFutureSpreadFairSpread;
    processMap_["SetFutureSpreadPosShift"] = &CTAOperationProcessor::process_SetFutureSpreadPosShift;
    processMap_["SetFutureSpreadMinGainCon"] = &CTAOperationProcessor::process_SetFutureSpreadMinGainCon;
    processMap_["SetFutureSpreadMinGainHit"] = &CTAOperationProcessor::process_SetFutureSpreadMinGainHit;
    processMap_["SetFutureSpreadMinInterval"] = &CTAOperationProcessor::process_SetFutureSpreadMinInterval;
    processMap_["SetFutureSpreadMaxWaitInterval"] = &CTAOperationProcessor::process_SetFutureSpreadMaxWaitInterval;
    processMap_["SetFutureSpreadHitSize"] = &CTAOperationProcessor::process_SetFutureSpreadHitSize;
    processMap_["SetFutureSpreadConSize"] = &CTAOperationProcessor::process_SetFutureSpreadConSize;
    processMap_["SetFutureSpreadConMinDiff"] = &CTAOperationProcessor::process_SetFutureSpreadConMinDiff;
    processMap_["SetFutureSpreadMinGainConExit"] = &CTAOperationProcessor::process_SetFutureSpreadMinGainConExit;
    processMap_["SetFutureSpreadConMaxDistance"] = &CTAOperationProcessor::process_SetFutureSpreadConMaxDistance;
    processMap_["SetFutureSpreadFuture1Pos"] = &CTAOperationProcessor::process_SetFutureSpreadFuture1Pos;
    processMap_["SetFutureSpreadFuture2Pos"] = &CTAOperationProcessor::process_SetFutureSpreadFuture2Pos;
    processMap_["SetFutureSpreadMaxNumOrders"] = &CTAOperationProcessor::process_SetFutureSpreadMaxNumOrders;
    processMap_["SetFutureSpreadMaxPos"] = &CTAOperationProcessor::process_SetFutureSpreadMaxPos;
    processMap_["SetFutureSpreadUseMarketOrder"] = &CTAOperationProcessor::process_SetFutureSpreadUseMarketOrder;
    processMap_["SetFutureSpreadPosConvex"] = &CTAOperationProcessor::process_SetFutureSpreadPosConvex;
    processMap_["SetFutureSpreadIgnoreUpDnLimit"] = &CTAOperationProcessor::process_SetFutureSpreadIgnoreUpDnLimit;
    processMap_["SetFutureSpreadConvergeRate"] = &CTAOperationProcessor::process_SetFutureSpreadConvergeRate;
    processMap_["SetFutureSpreadFastConvergeRate"] = &CTAOperationProcessor::process_SetFutureSpreadFastConvergeRate;
    processMap_["SetFutureSpreadRatio"] = &CTAOperationProcessor::process_SetFutureSpreadRatio;
    processMap_["SetAtsFutureSpreadFut1"] = &CTAOperationProcessor::process_SetAtsFutureSpreadFut1;
    processMap_["SetAtsFutureSpreadFut2"] = &CTAOperationProcessor::process_SetAtsFutureSpreadFut2;
    processMap_["SetAtsFutureSpreadLastKLineTime"] = &CTAOperationProcessor::process_SetAtsFutureSpreadLastKLineTime;
    processMap_["SetAtsFutureSpreadKInterval"] = &CTAOperationProcessor::process_SetAtsFutureSpreadKInterval;
    processMap_["CreateAutomaton"] = &CTAOperationProcessor::process_CreateAutomaton;
    processMap_["SpreadBidHitTrade"] = &CTAOperationProcessor::process_SpreadBidHitTrade;
    processMap_["SpreadAskHitTrade"] = &CTAOperationProcessor::process_SpreadAskHitTrade;
    processMap_["SpreadBidConTrade"] = &CTAOperationProcessor::process_SpreadBidConTrade;
    processMap_["SpreadAskConTrade"] = &CTAOperationProcessor::process_SpreadAskConTrade;
    processMap_["SetKeepOrders"] = &CTAOperationProcessor::process_SetKeepOrders;
    processMap_["SetForceOpen"] = &CTAOperationProcessor::process_SetForceOpen;
    processMap_["SetFutureSpeedConvergeRate"] = &CTAOperationProcessor::process_SetFutureSpeedConvergeRate;
    processMap_["SetFutureSpeed"] = &CTAOperationProcessor::process_SetFutureSpeed;
    processMap_["SetFutureLastSpread"] = &CTAOperationProcessor::process_SetFutureLastSpread;
    processMap_["SetVolatility"] = &CTAOperationProcessor::process_SetVolatility;
    processMap_["SetMaxVolRange"] = &CTAOperationProcessor::process_SetMaxVolRange;
    processMap_["SetMarketMakerActive"] = &CTAOperationProcessor::process_SetMarketMakerActive;
    processMap_["SetMarketMakerDouble"] = &CTAOperationProcessor::process_SetMarketMakerDouble;
    processMap_["SetMarketMakerInt"] = &CTAOperationProcessor::process_SetMarketMakerInt;
    processMap_["SetDoFutureMarketMaker"] = &CTAOperationProcessor::process_SetDoFutureMarketMaker;
    processMap_["SetMarketMakerCanReduce"] = &CTAOperationProcessor::process_SetMarketMakerCanReduce;
    processMap_["ForceContribe"] = &CTAOperationProcessor::process_ForceContribe;
    processMap_["ResetMovingAvg"] = &CTAOperationProcessor::process_ResetMovingAvg;
    processMap_["SetTwapData"] = &CTAOperationProcessor::process_SetTwapData;
    processMap_["SetTurtleAlgoData"] = &CTAOperationProcessor::process_SetTurtleAlgoData;
    processMap_["SetKlineConfig"] = &CTAOperationProcessor::process_SetKlineConfig;
    processMap_["SetTurtleFuture"] = &CTAOperationProcessor::process_SetTurtleFuture;
    processMap_["SetRiskDegree"] = &CTAOperationProcessor::process_SetRiskDegree;
    processMap_["MatchOrders"] = &CTAOperationProcessor::process_MatchOrders;
  }

  virtual ~CTAOperationProcessor() {}
};

class CTAOperationProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CTAOperationProcessorFactory(const ::boost::shared_ptr< CTAOperationIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CTAOperationIfFactory > handlerFactory_;
};

class CTAOperationMultiface : virtual public CTAOperationIf, public  ::AtsGeneral::AtsOperationMultiface {
 public:
  CTAOperationMultiface(std::vector<boost::shared_ptr<CTAOperationIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<CTAOperationIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::AtsGeneral::AtsOperationMultiface::add(*iter);
    }
  }
  virtual ~CTAOperationMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CTAOperationIf> > ifaces_;
  CTAOperationMultiface() {}
  void add(boost::shared_ptr<CTAOperationIf> iface) {
     ::AtsGeneral::AtsOperationMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  bool SetFutureSpreadHitStatus(const std::string& atsName, const bool status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadHitStatus(atsName, status);
    }
    return ifaces_[i]->SetFutureSpreadHitStatus(atsName, status);
  }

  bool SetFutureSpreadConStatus(const std::string& atsName, const bool status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadConStatus(atsName, status);
    }
    return ifaces_[i]->SetFutureSpreadConStatus(atsName, status);
  }

  bool SetFutureSpreadConBuy(const std::string& atsName, const bool status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadConBuy(atsName, status);
    }
    return ifaces_[i]->SetFutureSpreadConBuy(atsName, status);
  }

  bool SetFutureSpreadConSell(const std::string& atsName, const bool status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadConSell(atsName, status);
    }
    return ifaces_[i]->SetFutureSpreadConSell(atsName, status);
  }

  double SetFutureSpreadFairSpread(const std::string& atsName, const double fairspread) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadFairSpread(atsName, fairspread);
    }
    return ifaces_[i]->SetFutureSpreadFairSpread(atsName, fairspread);
  }

  double SetFutureSpreadPosShift(const std::string& atsName, const double posShift) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadPosShift(atsName, posShift);
    }
    return ifaces_[i]->SetFutureSpreadPosShift(atsName, posShift);
  }

  double SetFutureSpreadMinGainCon(const std::string& atsName, const double minGainCon) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadMinGainCon(atsName, minGainCon);
    }
    return ifaces_[i]->SetFutureSpreadMinGainCon(atsName, minGainCon);
  }

  double SetFutureSpreadMinGainHit(const std::string& atsName, const double minGainHit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadMinGainHit(atsName, minGainHit);
    }
    return ifaces_[i]->SetFutureSpreadMinGainHit(atsName, minGainHit);
  }

  int32_t SetFutureSpreadMinInterval(const std::string& atsName, const int32_t MinInterval) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadMinInterval(atsName, MinInterval);
    }
    return ifaces_[i]->SetFutureSpreadMinInterval(atsName, MinInterval);
  }

  int32_t SetFutureSpreadMaxWaitInterval(const std::string& atsName, const int32_t MaxWaitInterval) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadMaxWaitInterval(atsName, MaxWaitInterval);
    }
    return ifaces_[i]->SetFutureSpreadMaxWaitInterval(atsName, MaxWaitInterval);
  }

  int32_t SetFutureSpreadHitSize(const std::string& atsName, const int32_t HitSize) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadHitSize(atsName, HitSize);
    }
    return ifaces_[i]->SetFutureSpreadHitSize(atsName, HitSize);
  }

  int32_t SetFutureSpreadConSize(const std::string& atsName, const int32_t ConSize) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadConSize(atsName, ConSize);
    }
    return ifaces_[i]->SetFutureSpreadConSize(atsName, ConSize);
  }

  double SetFutureSpreadConMinDiff(const std::string& atsName, const double ConMinDiff) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadConMinDiff(atsName, ConMinDiff);
    }
    return ifaces_[i]->SetFutureSpreadConMinDiff(atsName, ConMinDiff);
  }

  double SetFutureSpreadMinGainConExit(const std::string& atsName, const double MinGainConExit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadMinGainConExit(atsName, MinGainConExit);
    }
    return ifaces_[i]->SetFutureSpreadMinGainConExit(atsName, MinGainConExit);
  }

  double SetFutureSpreadConMaxDistance(const std::string& atsName, const double ConMaxDistance) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadConMaxDistance(atsName, ConMaxDistance);
    }
    return ifaces_[i]->SetFutureSpreadConMaxDistance(atsName, ConMaxDistance);
  }

  int32_t SetFutureSpreadFuture1Pos(const std::string& atsName, const int32_t Future1Pos) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadFuture1Pos(atsName, Future1Pos);
    }
    return ifaces_[i]->SetFutureSpreadFuture1Pos(atsName, Future1Pos);
  }

  int32_t SetFutureSpreadFuture2Pos(const std::string& atsName, const int32_t Future2Pos) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadFuture2Pos(atsName, Future2Pos);
    }
    return ifaces_[i]->SetFutureSpreadFuture2Pos(atsName, Future2Pos);
  }

  int32_t SetFutureSpreadMaxNumOrders(const std::string& atsName, const int32_t MaxNumOrders) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadMaxNumOrders(atsName, MaxNumOrders);
    }
    return ifaces_[i]->SetFutureSpreadMaxNumOrders(atsName, MaxNumOrders);
  }

  int32_t SetFutureSpreadMaxPos(const std::string& atsName, const int32_t MaxPos) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadMaxPos(atsName, MaxPos);
    }
    return ifaces_[i]->SetFutureSpreadMaxPos(atsName, MaxPos);
  }

  bool SetFutureSpreadUseMarketOrder(const std::string& atsName, const bool useMarketORder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadUseMarketOrder(atsName, useMarketORder);
    }
    return ifaces_[i]->SetFutureSpreadUseMarketOrder(atsName, useMarketORder);
  }

  double SetFutureSpreadPosConvex(const std::string& atsName, const double posConvex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadPosConvex(atsName, posConvex);
    }
    return ifaces_[i]->SetFutureSpreadPosConvex(atsName, posConvex);
  }

  bool SetFutureSpreadIgnoreUpDnLimit(const std::string& atsName, const bool IgnoreUpDnLimit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadIgnoreUpDnLimit(atsName, IgnoreUpDnLimit);
    }
    return ifaces_[i]->SetFutureSpreadIgnoreUpDnLimit(atsName, IgnoreUpDnLimit);
  }

  double SetFutureSpreadConvergeRate(const std::string& atsName, const double ConvergeRate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadConvergeRate(atsName, ConvergeRate);
    }
    return ifaces_[i]->SetFutureSpreadConvergeRate(atsName, ConvergeRate);
  }

  double SetFutureSpreadFastConvergeRate(const std::string& atsName, const double FastConvergeRate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadFastConvergeRate(atsName, FastConvergeRate);
    }
    return ifaces_[i]->SetFutureSpreadFastConvergeRate(atsName, FastConvergeRate);
  }

  double SetFutureSpreadRatio(const std::string& atsName, const double Ratio) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpreadRatio(atsName, Ratio);
    }
    return ifaces_[i]->SetFutureSpreadRatio(atsName, Ratio);
  }

  void SetAtsFutureSpreadFut1(std::string& _return, const std::string& atsName, const std::string& code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetAtsFutureSpreadFut1(_return, atsName, code);
    }
    ifaces_[i]->SetAtsFutureSpreadFut1(_return, atsName, code);
    return;
  }

  void SetAtsFutureSpreadFut2(std::string& _return, const std::string& atsName, const std::string& code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetAtsFutureSpreadFut2(_return, atsName, code);
    }
    ifaces_[i]->SetAtsFutureSpreadFut2(_return, atsName, code);
    return;
  }

  void SetAtsFutureSpreadLastKLineTime(std::string& _return, const std::string& atsName, const std::string& KLineTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetAtsFutureSpreadLastKLineTime(_return, atsName, KLineTime);
    }
    ifaces_[i]->SetAtsFutureSpreadLastKLineTime(_return, atsName, KLineTime);
    return;
  }

  void SetAtsFutureSpreadKInterval(std::string& _return, const std::string& atsName, const std::string& KInterval) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetAtsFutureSpreadKInterval(_return, atsName, KInterval);
    }
    ifaces_[i]->SetAtsFutureSpreadKInterval(_return, atsName, KInterval);
    return;
  }

  void CreateAutomaton(CTAAtsMsg& _return, const std::string& automatonName, const std::string& underlyingName, const std::string& subscrib_list, const std::string& feedsourcesStr, const std::string& connectionsStr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateAutomaton(_return, automatonName, underlyingName, subscrib_list, feedsourcesStr, connectionsStr);
    }
    ifaces_[i]->CreateAutomaton(_return, automatonName, underlyingName, subscrib_list, feedsourcesStr, connectionsStr);
    return;
  }

  void SpreadBidHitTrade(const std::string& atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SpreadBidHitTrade(atsName);
    }
    ifaces_[i]->SpreadBidHitTrade(atsName);
  }

  void SpreadAskHitTrade(const std::string& atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SpreadAskHitTrade(atsName);
    }
    ifaces_[i]->SpreadAskHitTrade(atsName);
  }

  void SpreadBidConTrade(const std::string& atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SpreadBidConTrade(atsName);
    }
    ifaces_[i]->SpreadBidConTrade(atsName);
  }

  void SpreadAskConTrade(const std::string& atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SpreadAskConTrade(atsName);
    }
    ifaces_[i]->SpreadAskConTrade(atsName);
  }

  bool SetKeepOrders(const std::string& atsName, const bool keepOrders) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetKeepOrders(atsName, keepOrders);
    }
    return ifaces_[i]->SetKeepOrders(atsName, keepOrders);
  }

  bool SetForceOpen(const std::string& atsName, const bool forceOpen) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetForceOpen(atsName, forceOpen);
    }
    return ifaces_[i]->SetForceOpen(atsName, forceOpen);
  }

  double SetFutureSpeedConvergeRate(const std::string& atsName, const double SpeedConvergeRate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpeedConvergeRate(atsName, SpeedConvergeRate);
    }
    return ifaces_[i]->SetFutureSpeedConvergeRate(atsName, SpeedConvergeRate);
  }

  double SetFutureSpeed(const std::string& atsName, const double Speed) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureSpeed(atsName, Speed);
    }
    return ifaces_[i]->SetFutureSpeed(atsName, Speed);
  }

  double SetFutureLastSpread(const std::string& atsName, const double LastSpread) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFutureLastSpread(atsName, LastSpread);
    }
    return ifaces_[i]->SetFutureLastSpread(atsName, LastSpread);
  }

  double SetVolatility(const std::string& atsName, const double Vol) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetVolatility(atsName, Vol);
    }
    return ifaces_[i]->SetVolatility(atsName, Vol);
  }

  double SetMaxVolRange(const std::string& atsName, const double MaxVolRange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetMaxVolRange(atsName, MaxVolRange);
    }
    return ifaces_[i]->SetMaxVolRange(atsName, MaxVolRange);
  }

  bool SetMarketMakerActive(const std::string& atsName, const std::string& code, const bool active) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetMarketMakerActive(atsName, code, active);
    }
    return ifaces_[i]->SetMarketMakerActive(atsName, code, active);
  }

  double SetMarketMakerDouble(const std::string& atsName, const std::string& code, const std::string& param, const double value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetMarketMakerDouble(atsName, code, param, value);
    }
    return ifaces_[i]->SetMarketMakerDouble(atsName, code, param, value);
  }

  int32_t SetMarketMakerInt(const std::string& atsName, const std::string& code, const std::string& param, const int32_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetMarketMakerInt(atsName, code, param, value);
    }
    return ifaces_[i]->SetMarketMakerInt(atsName, code, param, value);
  }

  bool SetDoFutureMarketMaker(const std::string& atsName, const bool value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetDoFutureMarketMaker(atsName, value);
    }
    return ifaces_[i]->SetDoFutureMarketMaker(atsName, value);
  }

  bool SetMarketMakerCanReduce(const std::string& atsName, const bool value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetMarketMakerCanReduce(atsName, value);
    }
    return ifaces_[i]->SetMarketMakerCanReduce(atsName, value);
  }

  void ForceContribe(const std::string& atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ForceContribe(atsName);
    }
    ifaces_[i]->ForceContribe(atsName);
  }

  void ResetMovingAvg(const std::string& atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResetMovingAvg(atsName);
    }
    ifaces_[i]->ResetMovingAvg(atsName);
  }

  bool SetTwapData(const std::string& atsName, const TWAPDataMsg& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetTwapData(atsName, data);
    }
    return ifaces_[i]->SetTwapData(atsName, data);
  }

  bool SetTurtleAlgoData(const std::string& atsName, const TurtleAlgoMsg& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetTurtleAlgoData(atsName, data);
    }
    return ifaces_[i]->SetTurtleAlgoData(atsName, data);
  }

  bool SetKlineConfig(const std::string& atsName, const KlineConfigMsg& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetKlineConfig(atsName, data);
    }
    return ifaces_[i]->SetKlineConfig(atsName, data);
  }

  void SetTurtleFuture(std::string& _return, const std::string& atsName, const std::string& code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetTurtleFuture(_return, atsName, code);
    }
    ifaces_[i]->SetTurtleFuture(_return, atsName, code);
    return;
  }

  double SetRiskDegree(const std::string& atsName, const double RiskDegree) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetRiskDegree(atsName, RiskDegree);
    }
    return ifaces_[i]->SetRiskDegree(atsName, RiskDegree);
  }

  void MatchOrders() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchOrders();
    }
    ifaces_[i]->MatchOrders();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CTAOperationConcurrentClient : virtual public CTAOperationIf, public  ::AtsGeneral::AtsOperationConcurrentClient {
 public:
  CTAOperationConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::AtsGeneral::AtsOperationConcurrentClient(prot, prot) {}
  CTAOperationConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::AtsGeneral::AtsOperationConcurrentClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool SetFutureSpreadHitStatus(const std::string& atsName, const bool status);
  int32_t send_SetFutureSpreadHitStatus(const std::string& atsName, const bool status);
  bool recv_SetFutureSpreadHitStatus(const int32_t seqid);
  bool SetFutureSpreadConStatus(const std::string& atsName, const bool status);
  int32_t send_SetFutureSpreadConStatus(const std::string& atsName, const bool status);
  bool recv_SetFutureSpreadConStatus(const int32_t seqid);
  bool SetFutureSpreadConBuy(const std::string& atsName, const bool status);
  int32_t send_SetFutureSpreadConBuy(const std::string& atsName, const bool status);
  bool recv_SetFutureSpreadConBuy(const int32_t seqid);
  bool SetFutureSpreadConSell(const std::string& atsName, const bool status);
  int32_t send_SetFutureSpreadConSell(const std::string& atsName, const bool status);
  bool recv_SetFutureSpreadConSell(const int32_t seqid);
  double SetFutureSpreadFairSpread(const std::string& atsName, const double fairspread);
  int32_t send_SetFutureSpreadFairSpread(const std::string& atsName, const double fairspread);
  double recv_SetFutureSpreadFairSpread(const int32_t seqid);
  double SetFutureSpreadPosShift(const std::string& atsName, const double posShift);
  int32_t send_SetFutureSpreadPosShift(const std::string& atsName, const double posShift);
  double recv_SetFutureSpreadPosShift(const int32_t seqid);
  double SetFutureSpreadMinGainCon(const std::string& atsName, const double minGainCon);
  int32_t send_SetFutureSpreadMinGainCon(const std::string& atsName, const double minGainCon);
  double recv_SetFutureSpreadMinGainCon(const int32_t seqid);
  double SetFutureSpreadMinGainHit(const std::string& atsName, const double minGainHit);
  int32_t send_SetFutureSpreadMinGainHit(const std::string& atsName, const double minGainHit);
  double recv_SetFutureSpreadMinGainHit(const int32_t seqid);
  int32_t SetFutureSpreadMinInterval(const std::string& atsName, const int32_t MinInterval);
  int32_t send_SetFutureSpreadMinInterval(const std::string& atsName, const int32_t MinInterval);
  int32_t recv_SetFutureSpreadMinInterval(const int32_t seqid);
  int32_t SetFutureSpreadMaxWaitInterval(const std::string& atsName, const int32_t MaxWaitInterval);
  int32_t send_SetFutureSpreadMaxWaitInterval(const std::string& atsName, const int32_t MaxWaitInterval);
  int32_t recv_SetFutureSpreadMaxWaitInterval(const int32_t seqid);
  int32_t SetFutureSpreadHitSize(const std::string& atsName, const int32_t HitSize);
  int32_t send_SetFutureSpreadHitSize(const std::string& atsName, const int32_t HitSize);
  int32_t recv_SetFutureSpreadHitSize(const int32_t seqid);
  int32_t SetFutureSpreadConSize(const std::string& atsName, const int32_t ConSize);
  int32_t send_SetFutureSpreadConSize(const std::string& atsName, const int32_t ConSize);
  int32_t recv_SetFutureSpreadConSize(const int32_t seqid);
  double SetFutureSpreadConMinDiff(const std::string& atsName, const double ConMinDiff);
  int32_t send_SetFutureSpreadConMinDiff(const std::string& atsName, const double ConMinDiff);
  double recv_SetFutureSpreadConMinDiff(const int32_t seqid);
  double SetFutureSpreadMinGainConExit(const std::string& atsName, const double MinGainConExit);
  int32_t send_SetFutureSpreadMinGainConExit(const std::string& atsName, const double MinGainConExit);
  double recv_SetFutureSpreadMinGainConExit(const int32_t seqid);
  double SetFutureSpreadConMaxDistance(const std::string& atsName, const double ConMaxDistance);
  int32_t send_SetFutureSpreadConMaxDistance(const std::string& atsName, const double ConMaxDistance);
  double recv_SetFutureSpreadConMaxDistance(const int32_t seqid);
  int32_t SetFutureSpreadFuture1Pos(const std::string& atsName, const int32_t Future1Pos);
  int32_t send_SetFutureSpreadFuture1Pos(const std::string& atsName, const int32_t Future1Pos);
  int32_t recv_SetFutureSpreadFuture1Pos(const int32_t seqid);
  int32_t SetFutureSpreadFuture2Pos(const std::string& atsName, const int32_t Future2Pos);
  int32_t send_SetFutureSpreadFuture2Pos(const std::string& atsName, const int32_t Future2Pos);
  int32_t recv_SetFutureSpreadFuture2Pos(const int32_t seqid);
  int32_t SetFutureSpreadMaxNumOrders(const std::string& atsName, const int32_t MaxNumOrders);
  int32_t send_SetFutureSpreadMaxNumOrders(const std::string& atsName, const int32_t MaxNumOrders);
  int32_t recv_SetFutureSpreadMaxNumOrders(const int32_t seqid);
  int32_t SetFutureSpreadMaxPos(const std::string& atsName, const int32_t MaxPos);
  int32_t send_SetFutureSpreadMaxPos(const std::string& atsName, const int32_t MaxPos);
  int32_t recv_SetFutureSpreadMaxPos(const int32_t seqid);
  bool SetFutureSpreadUseMarketOrder(const std::string& atsName, const bool useMarketORder);
  int32_t send_SetFutureSpreadUseMarketOrder(const std::string& atsName, const bool useMarketORder);
  bool recv_SetFutureSpreadUseMarketOrder(const int32_t seqid);
  double SetFutureSpreadPosConvex(const std::string& atsName, const double posConvex);
  int32_t send_SetFutureSpreadPosConvex(const std::string& atsName, const double posConvex);
  double recv_SetFutureSpreadPosConvex(const int32_t seqid);
  bool SetFutureSpreadIgnoreUpDnLimit(const std::string& atsName, const bool IgnoreUpDnLimit);
  int32_t send_SetFutureSpreadIgnoreUpDnLimit(const std::string& atsName, const bool IgnoreUpDnLimit);
  bool recv_SetFutureSpreadIgnoreUpDnLimit(const int32_t seqid);
  double SetFutureSpreadConvergeRate(const std::string& atsName, const double ConvergeRate);
  int32_t send_SetFutureSpreadConvergeRate(const std::string& atsName, const double ConvergeRate);
  double recv_SetFutureSpreadConvergeRate(const int32_t seqid);
  double SetFutureSpreadFastConvergeRate(const std::string& atsName, const double FastConvergeRate);
  int32_t send_SetFutureSpreadFastConvergeRate(const std::string& atsName, const double FastConvergeRate);
  double recv_SetFutureSpreadFastConvergeRate(const int32_t seqid);
  double SetFutureSpreadRatio(const std::string& atsName, const double Ratio);
  int32_t send_SetFutureSpreadRatio(const std::string& atsName, const double Ratio);
  double recv_SetFutureSpreadRatio(const int32_t seqid);
  void SetAtsFutureSpreadFut1(std::string& _return, const std::string& atsName, const std::string& code);
  int32_t send_SetAtsFutureSpreadFut1(const std::string& atsName, const std::string& code);
  void recv_SetAtsFutureSpreadFut1(std::string& _return, const int32_t seqid);
  void SetAtsFutureSpreadFut2(std::string& _return, const std::string& atsName, const std::string& code);
  int32_t send_SetAtsFutureSpreadFut2(const std::string& atsName, const std::string& code);
  void recv_SetAtsFutureSpreadFut2(std::string& _return, const int32_t seqid);
  void SetAtsFutureSpreadLastKLineTime(std::string& _return, const std::string& atsName, const std::string& KLineTime);
  int32_t send_SetAtsFutureSpreadLastKLineTime(const std::string& atsName, const std::string& KLineTime);
  void recv_SetAtsFutureSpreadLastKLineTime(std::string& _return, const int32_t seqid);
  void SetAtsFutureSpreadKInterval(std::string& _return, const std::string& atsName, const std::string& KInterval);
  int32_t send_SetAtsFutureSpreadKInterval(const std::string& atsName, const std::string& KInterval);
  void recv_SetAtsFutureSpreadKInterval(std::string& _return, const int32_t seqid);
  void CreateAutomaton(CTAAtsMsg& _return, const std::string& automatonName, const std::string& underlyingName, const std::string& subscrib_list, const std::string& feedsourcesStr, const std::string& connectionsStr);
  int32_t send_CreateAutomaton(const std::string& automatonName, const std::string& underlyingName, const std::string& subscrib_list, const std::string& feedsourcesStr, const std::string& connectionsStr);
  void recv_CreateAutomaton(CTAAtsMsg& _return, const int32_t seqid);
  void SpreadBidHitTrade(const std::string& atsName);
  int32_t send_SpreadBidHitTrade(const std::string& atsName);
  void recv_SpreadBidHitTrade(const int32_t seqid);
  void SpreadAskHitTrade(const std::string& atsName);
  int32_t send_SpreadAskHitTrade(const std::string& atsName);
  void recv_SpreadAskHitTrade(const int32_t seqid);
  void SpreadBidConTrade(const std::string& atsName);
  int32_t send_SpreadBidConTrade(const std::string& atsName);
  void recv_SpreadBidConTrade(const int32_t seqid);
  void SpreadAskConTrade(const std::string& atsName);
  int32_t send_SpreadAskConTrade(const std::string& atsName);
  void recv_SpreadAskConTrade(const int32_t seqid);
  bool SetKeepOrders(const std::string& atsName, const bool keepOrders);
  int32_t send_SetKeepOrders(const std::string& atsName, const bool keepOrders);
  bool recv_SetKeepOrders(const int32_t seqid);
  bool SetForceOpen(const std::string& atsName, const bool forceOpen);
  int32_t send_SetForceOpen(const std::string& atsName, const bool forceOpen);
  bool recv_SetForceOpen(const int32_t seqid);
  double SetFutureSpeedConvergeRate(const std::string& atsName, const double SpeedConvergeRate);
  int32_t send_SetFutureSpeedConvergeRate(const std::string& atsName, const double SpeedConvergeRate);
  double recv_SetFutureSpeedConvergeRate(const int32_t seqid);
  double SetFutureSpeed(const std::string& atsName, const double Speed);
  int32_t send_SetFutureSpeed(const std::string& atsName, const double Speed);
  double recv_SetFutureSpeed(const int32_t seqid);
  double SetFutureLastSpread(const std::string& atsName, const double LastSpread);
  int32_t send_SetFutureLastSpread(const std::string& atsName, const double LastSpread);
  double recv_SetFutureLastSpread(const int32_t seqid);
  double SetVolatility(const std::string& atsName, const double Vol);
  int32_t send_SetVolatility(const std::string& atsName, const double Vol);
  double recv_SetVolatility(const int32_t seqid);
  double SetMaxVolRange(const std::string& atsName, const double MaxVolRange);
  int32_t send_SetMaxVolRange(const std::string& atsName, const double MaxVolRange);
  double recv_SetMaxVolRange(const int32_t seqid);
  bool SetMarketMakerActive(const std::string& atsName, const std::string& code, const bool active);
  int32_t send_SetMarketMakerActive(const std::string& atsName, const std::string& code, const bool active);
  bool recv_SetMarketMakerActive(const int32_t seqid);
  double SetMarketMakerDouble(const std::string& atsName, const std::string& code, const std::string& param, const double value);
  int32_t send_SetMarketMakerDouble(const std::string& atsName, const std::string& code, const std::string& param, const double value);
  double recv_SetMarketMakerDouble(const int32_t seqid);
  int32_t SetMarketMakerInt(const std::string& atsName, const std::string& code, const std::string& param, const int32_t value);
  int32_t send_SetMarketMakerInt(const std::string& atsName, const std::string& code, const std::string& param, const int32_t value);
  int32_t recv_SetMarketMakerInt(const int32_t seqid);
  bool SetDoFutureMarketMaker(const std::string& atsName, const bool value);
  int32_t send_SetDoFutureMarketMaker(const std::string& atsName, const bool value);
  bool recv_SetDoFutureMarketMaker(const int32_t seqid);
  bool SetMarketMakerCanReduce(const std::string& atsName, const bool value);
  int32_t send_SetMarketMakerCanReduce(const std::string& atsName, const bool value);
  bool recv_SetMarketMakerCanReduce(const int32_t seqid);
  void ForceContribe(const std::string& atsName);
  int32_t send_ForceContribe(const std::string& atsName);
  void recv_ForceContribe(const int32_t seqid);
  void ResetMovingAvg(const std::string& atsName);
  int32_t send_ResetMovingAvg(const std::string& atsName);
  void recv_ResetMovingAvg(const int32_t seqid);
  bool SetTwapData(const std::string& atsName, const TWAPDataMsg& data);
  int32_t send_SetTwapData(const std::string& atsName, const TWAPDataMsg& data);
  bool recv_SetTwapData(const int32_t seqid);
  bool SetTurtleAlgoData(const std::string& atsName, const TurtleAlgoMsg& data);
  int32_t send_SetTurtleAlgoData(const std::string& atsName, const TurtleAlgoMsg& data);
  bool recv_SetTurtleAlgoData(const int32_t seqid);
  bool SetKlineConfig(const std::string& atsName, const KlineConfigMsg& data);
  int32_t send_SetKlineConfig(const std::string& atsName, const KlineConfigMsg& data);
  bool recv_SetKlineConfig(const int32_t seqid);
  void SetTurtleFuture(std::string& _return, const std::string& atsName, const std::string& code);
  int32_t send_SetTurtleFuture(const std::string& atsName, const std::string& code);
  void recv_SetTurtleFuture(std::string& _return, const int32_t seqid);
  double SetRiskDegree(const std::string& atsName, const double RiskDegree);
  int32_t send_SetRiskDegree(const std::string& atsName, const double RiskDegree);
  double recv_SetRiskDegree(const int32_t seqid);
  void MatchOrders();
  int32_t send_MatchOrders();
  void recv_MatchOrders(const int32_t seqid);
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
